	PAGE	60
	title	'SETDPB---QX-10+ Specify disk DPB'
	.z80

;===================================;
; QX-10 Utility to change a disk DPB;
;===================================;

;---------------------------------------------------------;
; SETDPB - Utility to overwrite the DPB's in the QX-10    ;
; CP/M + BIOS to select a specific DPB disk format        ;
;---------------------------------------------------------;

;---------------------------------------------------------;
; Author: 	D. Powys-Lybbe, MML Systems Ltd.          ;
; Written:	22nd May 1984                             ;
;---------------------------------------------------------;

;---------------------------------------------------------;
; Revisions                                               ;
; ---------                                               ;
;                                                         ;
;---------------------------------------------------------;


	public	change,dpbtble,dpb
	public	dphtptr,dphtble
	public	dphptr,dph

VERS	EQU	00	; Pre-release
qx10rev	equ	'A'


;----------------;
; Useful equates ;
;----------------;

BOOT	EQU	0	;Reboot to SYSTEM
WBOOT	EQU	1	;address of warm boot
LF	EQU	0AH	;linefeed
CR	EQU	0DH	;carriage return

CI	EQU	6	;console input
CO	EQU	9	;console output

sysbnk	equ	0	; CP/M System bank number
tpabnk	equ	1	; CP/M TPA bank number

bit0	equ	1 shl 0
bit1	equ	1 shl 1
bit2	equ	1 shl 2
bit3	equ	1 shl 3
bit4	equ	1 shl 4
bit5	equ	1 shl 5
bit6	equ	1 shl 6
bit7	equ	1 shl 7


;---------------------------------------------------------------------------;
	page

	cseg

	jp	START

;----------;
; Messages ;
;----------;

	DB	'COPYRIGHT  1984, MML Systems Ltd',1ah

SIGNON:
	DB	'QX-10+ SETDPB   ver '
	db	vers/10+'0','.',vers mod 10+'0' 
	db	cr,lf,0

menu:
db lf,lf,lf,lf,lf,lf
DB cr,lf,'                    DPB FORMATS '
db cr,lf
db cr,lf
db cr,lf,'             0   HELP Additional information'
db cr,lf,'             1   SELECT  Auto Density disk format'
db cr,lf,'             2   RESTORE Standard EPSON QX10 format'
db cr,lf,'             3   RESTORE High Capacity EPSON QX10 + format'
db cr,lf,'             4   RESTORE IBM Single Sided Format'
db cr,lf,'             5   RESTORE IBM Double Sided Format'
db cr,lf,'             6   SET  DPB paramter bytes for selected size and sides'
db cr,lf,'             7   SET  Updated DPB for selected size and sides'
db cr,lf,'             8   SHOW current selection'
db cr,lf
db cr,lf,'             9   QUIT Leave format unchanged'
db cr,lf
db cr,lf
db cr,lf,'             Select 0 or 8 for more information'
db cr,lf,'             or select 9 to leave unchanged'
db cr,lf,'             or select DPB function (1 thru 7) ---- ? '
db 0

show:
db	lf,lf,lf,lf,lf,lf,lf,lf,lf,lf,lf,lf
DB	cr,lf,'                    CURRENT DISC FORMAT SELECTION'
db	cr,lf
db	cr,lf
db	cr,lf
db	cr,lf,'             Selected number of sides ----------> '
db	0

showend:
db	cr,lf
db	cr,lf
db 	cr,lf,'                             ------- Press <RETURN> to continue'
db	0

showss:
db	'Single sided'
db	0
showds:
db	'Double sided'
db	0
showsize:
db	cr,lf,'             Selected Sector size --------------> '
db	0
showtble:
	dw	show128
	dw	show256
	dw	show512
	dw	show1024

show128:
db	'128 bytes'
db	0
show256:
db	'256 bytes'
db	0
show512:
db	'512 bytes'
db	0
show1024:
db	'1024 bytes'
db	0

showf:	db	cr,lf,'    Format Bit pattern -------- '
showfno:
	db	'00000000  ',0

showg:
	db	cr,lf,'                                '
	db	      'N   EOT GPL DTL'
	db	cr,lf,'    NEC765 Sector ID (decimal): '
showgno:
	db	      'N   EOT GPL DTL   ',0

showpb:	db	cr,lf,'    Physical block factor ----- '
showpbno:
	db	'0  ',0

showdpb:
	db	cr,lf,'                                '
	db	      'SPT  BS BL EX DSM  DRM  AL01 CKS  OFF  PS PH'
	db	cr,lf,'    Disc Parameter Block (hex): '
showdpbno:
	db	      'SPT  BS BL EX DSM  DRM  AL01 CKS  OFF  PS PH   ',0

shownone:
	db	cr,lf,'    --- no disk parameter block available ---'
	db	cr,lf
	db	cr,lf
	db	cr,lf,0

matrix:	db	cr,lf,'                        Sector size (bytes)'
	db	cr,lf,'                         256     512   1024'
	db	cr,lf,'                        ----    ----   ----'
	db	cr,lf,'    5.25" Single Side :    2  :    4 :    6'
	db	cr,lf,'    5.25" Double Side :    3  :    5 :    7'
	db	cr,lf,'    3.5"  Single Side :   10  :   12 :   14'
	db	cr,lf,'    3.5"  Double Side :   11  :   13 :   15'
	db	cr,lf,'                       --------------------'
	db	cr,lf
	db	cr,lf,'      Select Auto Density no. -------------> ? ',0


done:
	db 	cr,lf,'SETDPB function completed',0

nodpb:
	db 	cr,lf,'*** DPB not available for specified format '
	db	'- please try again',0

noset:
	db 	cr,lf,'*** Cannot update DPB as none selected'
	db	'- please try again',0

terminate:
	db 	cr,lf,'SETDPB - Program terminated',0

exitmsg:
	db	cr,lf,'SETDPB - Program completed',0

contms:
	db	cr,lf,'Continue (else exit program) ? (Y/N) ',0

helpmsg:
db	cr,lf
db '       SETDPB - Set DPB diskette format'
db	cr,lf	;1
db	cr,lf	;2
db '   The QX-10 with CP/M Plus allows through the auto density selection'
db	cr,lf	;3
db '   a range of physical disc formats. However for any physical format'
db	cr,lf	;4
db '   it is possible to use many different disk parameter blocks. For example'
db	cr,lf	;5
db '   the number of system tracks can vary. This utility allows the DPB for a'
db	cr,lf	;6
db '   specific physical drive to be temporarily changed.'
db	cr,lf	;7
db	cr,lf	;8
db '   The data requested is as follows: (refer to manuals for specification)'
db	cr,lf	;9
db '   1.  NEC 765 paramters - Generally only the gap may require changing'
db	cr,lf	;10
db '   2.  DPB - Each item can be changed.'
db	cr,lf	;11
db '   3.  Track format - cylinder mode, or track mode'
db	cr,lf	;12
db '   4.  Physical Sector Blocking - Sectors may be combined up to 1K byte'
db	cr,lf	;13
db	cr,lf	;14
db '   Firstly specify the physical sector size (256, 523 or 1024 bytes)'
db	cr,lf	;15
db '   which is to be altered'
db	cr,lf	;16
db	cr,lf	;17
db '   Secondly specify if the disc is single sided or double sided'
db	cr,lf	;18
db	cr,lf	;19
db	cr,lf	;20
db	cr,lf	;21
db	cr,lf	;22
db	cr,lf	;23
db	cr,lf	;24
db '                                 ------- Press <RETURN> to continue'
db	0

qry1:	db	      '    Format Bit pattern ------- ? ',0
qry2:	db	      '    NEC765 Sector ID ----------  '
	db	      'N   EOT GPL DTL'
	db	cr,lf,'    (3 digit decimal) -------- ? ',0
qry3:	db	      '    Physical block factor ---- ? ',0
qry4:	db	      '    Disc Parameter Block ------  '
	db	      'SPT  BS BL EX DSM  DRM  AL01 CKS  OFF  PS PH'
	db	cr,lf,'    (hex word or byte) ------- ? ',0

;----------------;
; Error messages ;
;----------------;
cpm3msg:
	db	cr,lf,'SETDPB - Requires CP/M + on Epson QX-10$'

mnuer:
	db	cr,lf,'? Invalid choice ( use 0 or 1 or 2 ...thru 9 )',0

ccperr:
	db	cr,lf,'*** SYNTAX ERROR - Invalid CCP command line',0

dpherr:
	db	cr,lf,'*** SYSTEM ERROR - No floppy diskette driver',0

;------------;
; data areas ;
;------------;

tpadsk:	db	0	; Source drive for TPA program

dphtptr:
	dw	0	; address of DPH table

dphtble:
	dw	0	; drive 0	; copy of DPH table
	dw	0	; drive 1
	dw	0	; drive 2
	dw	0	; drive 3
	dw	0	; drive 4
	dw	0	; drive 5
	dw	0	; drive 6
	dw	0	; drive 7
	dw	0	; drive 8
	dw	0	; drive 9
	dw	0	; drive 10
	dw	0	; drive 11
	dw	0	; drive 12
	dw	0	; drive 13
	dw	0	; drive 14
	dw	0	; drive 15

dphptr:
	dw	0	; address of DPH

	ds	10	; 10 bytes of extended DPH
dph:			; copy of DPH
	ds	25	; 25 bytes in length


dpbtptr:
	dw	0	; address of DPBTPTR in BIOS
dpbtble:
	dw	0	; dpb0		; copy of dpb table
	dw	0	; dpb1
	dw	0	; dpb2
	dw	0	; dpb3
	dw	0	; dpb4
	dw	0	; dpb5
	dw	0	; dpb6
	dw	0	; dpb7
	dw	0	; dpb8
	dw	0	; dpb9
	dw	0	; dpb10
	dw	0	; dpb11
	dw	0	; dpb12
	dw	0	; dpb13
	dw	0	; dpb14
	dw	0	; dpb15

dpbptr:	dw	0	; address of current DPB

	ds	1	; NEW format byte for extended DPB
	ds	6	; extended DPB
dpb:	ds	17	; copy of DPB

format:	db	0	; set to selected sides and sector size

dpb5ssibm:			; IBM single sided DPB
	dw	32	; SPT
	db	3,7	; BSH, BLM
	db	0	; EXM
	dw	156-1	; DSM
	dw	64-1	; DRM
	db	0c0h,0	; AL0,AL1
	dw	16	; CKS
	dw	1	; OFF
	db	3,7	; PSH, PHM

dpb5dsibm:			; IBM double sided DPB
	dw	32	; SPT
	db	4,15	; BSH, BLM
	db	1	; EXM
	dw	158-1	; DSM
	dw	64-1	; DRM
	db	080h,0	; AL0,AL1
	dw	16	; CKS
	dw	1	; OFF
	db	3,7	; PSH, PHM


;-------------------------------------------------------------------;

	subttl  'BDOS CHARACTER SUBROUTINES'
	page

;----------------;
; BDOS functions ;
;----------------;
bdos	equ	0005h	;BDOS entry point
DBUFF	equ	0080h	; CCP command tail
dtpa	equ	0050h	; Drive from which program loaded

bd$res	equ	0	; BDOS System Reset
bd$cin	equ	1	; BDOS Console Input
bd$cot	equ	2	; BDOS Console Output
bd$str	equ	9	; BDOS Print string
bd$buff	equ	10	; BDOS Read Console Buffer
bd$ver	equ	12	; BDOS Return Version Number
bd$rds	equ	13	; BDOS Reset disk system
bd$sdsk	equ	14	; BDOS Select DiSK
bd$open	equ	15	; BDOS Open File
bd$clos	equ	16	; BDOS Close File
bd$delf	equ	19	; BDOS DELete File
bd$read	equ	20	; BDOS Sequential Read
bd$writ	equ	21	; BDOS Sequential Write
bd$make	equ	22	; BDOS MAKE file
bd$cdsk	equ	25	; BDOS Return Current Disk
bd$dma	equ	26	; BDOS Set DMA transfer address
bd$size	equ	35	; BDOS Compute File Size
bd$msc	equ	44	; BDOS Multi-Sector Count
bd$sber	equ	45	; BDOS Set Bdos Error Mode
bd$bios	equ	50	; BDOS Direct bios call
bd$mode	equ	109	; BDOS Get/Set Console Mode
bd$delm	equ	110	; BDOS Get/Set Output delimiter

;---------------------------------------
;Direct BIOS call - BIOS PARAMETER BLOCK
;---------------------------------------
BIOSPB:
BIOSFC:	db	0		;BIOS function number
AREG:	db	0		;A register contents
BCREG:
CREG:	db	0		;C register contents
BREG:	db	0		;B register contents
DEREG:
EREG:	db	0		;E register contents
DREG:	db	0		;D register contents
HLREG:	dw	0		;HL register contents


savesp:	dw	0	; save stack

	page
	subttl  'BDOS CHARACTER SUBROUTINES'

;------;
cpm2str:	; output string terminated by a '$'
;------;
	push	de
	call	crlf
	pop	de
	jp	prtstr

;------;
lineout:
;------;
	push	de
	call	crlf
	pop	de
;-----;
prtstr:
;-----;
	ld	c,bd$str	; BDOS Print string
	jp	BDOS

;---;
CRLF:			; Send Carriage Return, Line Feed
;---;
	ld	a,CR
	call	PUTCHAR
	ld	a,LF
	jp	PUTCHAR

;------;
putchar:
;------;
	ld	e,a
	ld	c,bd$cot	; BDOS Console Output
	call	bdos		;conout
	ret

;-----------------------------------------
; fetch character and conver to upper case
;-----------------------------------------
getchar:
	ld	de,conbuff
	ld	c,bd$buff	; BDOS Read Console Buffer
	call	bdos
	ld	hl,conbuff+1
	ld	a,(hl)
	or	a
	ld	a,cr
	ret	z
	inc	hl
	ld	a,(hl)
	cp	'a'
	ret	c
	cp	'z'+1
	ret	nc
	and	5fh		; remove case bits
	ret

conbuff:
	db	1		; maximum number of characters in buffer
	db	0		; number of characters in buffer
	ds	1		; buffer

;---------------------------------------
; fetch message using initialized buffer
;---------------------------------------
getmsg:
	ld	de,msgbuff
	ld	c,bd$dma
	call	bdos		; set DMA -> message

	ld	de,0		; use DMA buffer
	ld	c,bd$buff	; BDOS Read Console Buffer
	call	bdos
	ret

msgbuff:
	db	80		; maximum number of characters in buffer
	db	0		; number of characters in buffer
	ds	80		; buffer


;------------------------------------------------;
; convert binary in <BC> into 4 byte hex at (de) ;
;------------------------------------------------;
hexw:
	ld	a,b
	call	hexb
	ld	a,c
;-----------------------------------------------;
; convert binary in <A> into 2 byte hex at (de) ;
;-----------------------------------------------;
hexb:
	push	af
	rrca
	rrca
	rrca
	rrca
	call	hex
	pop	af
hex:	and	0fh
	add	a,'0'
	cp	'9'+1
	jr	c,hexm
	add	a,'A'-'0'-10
hexm:	ld	(de),a
	inc	de
	ret


;-------------------------------------------;
; convert hex ascii text at (hl)	    ;
; into binary in <A> 			    ;
; Returns: CF if error			    ;
;-------------------------------------------;
asch:
	ld	a,(hl)
	inc	hl
	cp	' '
	jr	z,asch
	call	ascm
	ret	c
	rlca
	rlca
	rlca
	rlca
	push	af
	ld	a,(hl)
	inc	hl
	call	ascm
	jr	c,ascerr
	ld	c,a
	pop	af
	or	c
	ret

ascerr:	inc	sp
	inc	sp
	ret


ascm:	call	ucse
	sub	'0'
	ret	c
	cp	9+1
	ccf
	ret	nc
	sub	'A'-'0'-10
	ret	c
	cp	15+1
	ccf
	ret

ucse:	cp	'a'
	ret	c
	cp	'z'+1
	ret	nc
	add	a,'A'-'a'
	ret

;---------------------------------------------------;
; convert binary in <A> into 1 byte decimal at (de) ;
;---------------------------------------------------;
decb:
	add	a,'0'
	ld	(de),a
	inc	de
	ret


;-------------------------------------------;
; convert decimal ascii character at (hl)   ;
; into binary in <A> 			    ;
; Returns: CF if error			    ;
;-------------------------------------------;
ascd:
	ld	a,(hl)
	inc	hl
	cp	' '
	jr	z,ascd
	sub	'0'
	ret	c
	cp	9+1
	ccf
	ret

;---------------------------------------------------;
; convert binary in <A> into 3 byte decimal at (de) ;
;---------------------------------------------------;
dec3b:
	ex	de,hl
	ld	(hl),'0'-1
dec3b0:	sub	100
	inc	(hl)
	jr	nc,dec3b0
	add	a,100
	inc	hl
	ld	(hl),'0'-1
dec3b1:	sub	10
	inc	(hl)
	jr	nc,dec3b1
	add	a,10
	inc	hl
	ex	de,hl
	jr	decb

;-------------------------------------------;
; convert 3 decimal ascii characters        ;
; at (hl) into binary in <A> 		    ;
; Returns: CF if error			    ;
;-------------------------------------------;
asc3d:
	ld	a,(hl)
	inc	hl
	cp	' '
	jr	z,asc3d

	ld	c,0
	sub	'0'
	ret	c
	cp	2+1
	ccf
	ret	c
	ld	c,a
	add	a,a
	add	a,a
	add	a,c
	add	a,a
	ld	c,a	; *10

	ld	a,(hl)
	inc	hl
	sub	'0'
	ret	c
	cp	9+1
	ccf
	ret	c
	add	a,c
	ld	c,a
	add	a,a
	add	a,a
	add	a,c
	add	a,a
	ret	c
	ld	c,a	; *100

	ld	a,(hl)
	inc	hl
	sub	'0'
	ret	c
	cp	9+1
	ccf
	ret	c
	add	a,c
	ret

;------------------------------------------------;
; convert binary in <A> into 8 byte bits at (de) ;
;------------------------------------------------;
bitb:
	ld	b,8
	ex	de,hl
bitb1:	add	a,a
	ld	(hl),'0'
	jr	nc,bitb2
	inc	(hl)
bitb2:	inc	hl
	djnz	bitb1
	ex	de,hl
	ret


;-------------------------------------------;
; convert bit ascii text at (hl)	    ;
; into binary in <A> 			    ;
; Returns: CF if error			    ;
;-------------------------------------------;
ascb:
	ld	a,(hl)
	inc	hl
	cp	' '
	jr	z,ascb	; skip leading spaces
	ld	b,8
	ld	c,0
ascb1:	sub	'0'
	ret	c
	cp	2
	ccf
	ret	c
	rra
	ld	a,c
	rla
	ld	c,a
	ld	a,(hl)
	inc	hl
	djnz	ascb1
	dec	hl
	ld	a,c
	and	a
	ret

;-----------------------------------------;
; Program not loaded under CP/M3 on Epson ;
;-----------------------------------------;
notcpm3:
	ld	de,cpm3msg
	call	cpm2str

	ld	c,bd$res	; BDOS System Reset
	jp	bdos		; and terminate program

;---------------------------------------------------------------------------;


	subttl  'S E T D S K     main'
	page
;====;
START:
;====;
	ld	hl,(bdos+1)	; Use top of memory as stack
	ld	sp,hl

;
;test version number
;
	ld	c,bd$ver	; BDOS Return Version Number
	call	BDOS
	cp	31h		;version 3
	jr	nz,notcpm3
	ld	a,h		;cpm or mpm
	or	a
	jr	nz,notcpm3
;
;test bios version
;
	ld	c,bd$bios	; BDOS Direct bios call	
	ld	de,BIOSpb
	ld	a,30		; Customised BIOS entry point
	ld	(de),a		; requires no other registers
	call	BDOS
	cp	qx10rev		; Epson BIOS returned version
	jr	nz,notcpm3

;
;drive from which TPA loaded
;
	ld	a,(dtpa)
	dec	a
	cp	-1		; test for default drive
	ld	c,bd$cdsk	; BDOS Return Current Disk
	call	z,bdos		; -yes- so fetch default disk
	ld	(tpadsk),a	; save program source drive

;----------------;
; Set BDOS modes ;
;----------------;
	ld	e,0ffh		; Set return disk error mode
	ld	c,bd$sber	; BDOS Set Bdos Error Mode
	call	BDOS

	ld	de,0		; Set output delimiter to 00h
	ld	c,bd$delm	; BDOS Get/Set Output delimiter
	call	BDOS

;-----------------;
; Display heading ;
;-----------------;
	ld	a,(dbuff)
	or	a
	ld 	de,signon
	call	z,lineout

	ld	a,0
	ld	(format),a	; sets format to s/side & 128 bytes

	ld	hl,0
	ld	(dpbptr),hl	; set no DPB read for updating

;--------------------;
; Get table of DPH's ;
;--------------------;

	ld	c,bd$bios	; BDOS Direct BIOS calls
	ld	de,BIOSPB
	ld	a,22		; BIOS Return address of dph table
	ld	(de),a		; requires no other registers
	call	BDOS
	ld	(dphtptr),hl	; this address is in system bank

	ld	(savesp),sp
	ld	sp,0

	ld	a,29*3		; BIOS Set Banks for following move
	ld	(BOOT+1),a
	ld	b,tpabnk	; set destination bank
	ld	c,sysbnk	; set source bank
	call	BOOT

	ld	a,25*3		; BIOS Memory to Memory Block Move
	ld	(BOOT+1),a
	ld	hl,dphtble	; set destination address
	ld	de,(dphtptr)	; set source address
	ld	bc,16*2		; set count
	call	BOOT
	ld	a,3
	ld	(BOOT+1),a		; restore WBOOT vector
	ld	sp,(savesp)

;---------------;
; Get TPA's DPH ;
;---------------;

	ld	a,(tpadsk)
	ld	e,a
	ld	d,0
	ld	hl,dphtble
	add	hl,de
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ex	de,hl
	ld	(dphptr),hl	; save address
	ld	a,h
	or	l
	jr	z,skipdph

	ld	(savesp),sp
	ld	sp,0

	ld	a,29*3		; BIOS Set Banks for following move
	ld	(BOOT+1),a
	ld	b,tpabnk	; set destination bank
	ld	c,sysbnk	; set source bank
	call	BOOT

	ld	a,25*3		; BIOS Memory to Memory Block Move
	ld	(BOOT+1),a

	ld	bc,-10		; offset to start of X-DPH
	ld	hl,(dphptr)
	add	hl,bc
	ex	de,hl		; set source address
	ld	hl,dph
	add	hl,bc		; set destination address
	ld	bc,25+10	; set count
	call	BOOT
	ld	a,3
	ld	(BOOT+1),a		; restore WBOOT vector
	ld	sp,(savesp)
skipdph:

;-----------------------------------
; Examine each entry in table
; to find a pattern of four addresses
; separated by 25+10 bytes
;-----------------------------------    

; 1. sort into ascending order

again:	ld	b,16-1
	ld	hl,dphtble
srtdph:	push	bc
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	dec	hl
	ld	a,b
	cp	d
	jr	c,reverse
	jr	nz,ascends
	ld	a,c
	cp	e
	jr	nc,ascends
reverse:
	inc	hl		;8
	ld	(hl),d		;7
	dec	hl          	;6
	ld	(hl),e		;5
	dec	hl          	;4
	ld	(hl),b		;3
	dec	hl          	;2
	ld	(hl),c		;1
	pop	bc
	jr	again
ascends:
	pop	bc
	djnz	srtdph

; 2. test for interval of 25+10 bytes

pattern:
	ld	b,16-4
	ld	hl,dphtble
gapdph:	push	bc
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	push	hl
; 1st tst
	push	hl
	ld	hl,25+10
	add	hl,de
	ex	de,hl
	pop	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	inc	hl
	ld	a,b
	cp	d
	jr	nz,not35
	ld	a,c
	cp	e
	jr	nz,not35
; 2nd tst
	push	hl
	ld	hl,25+10
	add	hl,de
	ex	de,hl
	pop	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	inc	hl
	ld	a,b
	cp	d
	jr	nz,not35
	ld	a,c
	cp	e
	jr	nz,not35
; 3rd tst
	push	hl
	ld	hl,25+10
	add	hl,de
	ex	de,hl
	pop	hl
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	inc	hl
	ld	a,b
	cp	d
	jr	nz,not35
	ld	a,c
	cp	e
	jr	nz,not35
	call	tstdpbtble	; have 4 sets of dph's with gap of 25+10
	jp	z,fndfloppy
not35:
	pop	hl
	pop	bc
	djnz	gapdph
	jp	notdpb

;----------------------------------------;
; have 4 sets of dph's with gap of 25+10 ;
; now test for valid table of DPB's      ;
; <BC> = address of last DPH             ;
; returns <A>=0 if found, <DE> -> DPB    ;
;----------------------------------------;
tstdpbtble:
	ld	hl,8ch-73h
	add	hl,bc		; <HL> should be start of 3.5in or 5in table
	ld	(dpbtptr),hl
;------------------
; copy dpbtble over
;------------------
	ld	(savesp),sp
	ld	sp,0
	push	hl

	ld	a,29*3		; BIOS Set Banks for following move
	ld	(BOOT+1),a
	ld	b,tpabnk	; set destination bank
	ld	c,sysbnk	; set source bank
	call	BOOT

	ld	a,25*3		; BIOS Memory to Memory Block Move
	ld	(BOOT+1),a
	ld	hl,dpbtble	; set destination address
	pop	de		; set source address
	ld	bc,16*2		; set count
	call	BOOT
	ld	a,3
	ld	(BOOT+1),a		; restore WBOOT vector
	ld	sp,(savesp)


;-----------------------------------------
; test each DPB for either valid DPB DPB's
;-----------------------------------------
	ld	b,16
	ld	hl,dpbtble
nxtdpb:	push	bc
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	push	hl
	ex	de,hl
	ld	(dpbptr),hl	; save address of DPB under test
	ld	de,dpb
	ld	bc,17
	ldir			; copy DPB
	ld	hl,dpb
	call	tstdpb5ssibm
	ld	a,1
	jr	z,fnddpb
	ld	hl,dpb
	call	tstdpb5dsibm
	ld	a,2
	jr	z,fnddpb
enddpb:	pop	hl
	pop	bc
	djnz	nxtdpb
	or	-1
	ret			; set NZ flag as cant find DPB format

fnddpb:	pop	hl
	pop	bc
	ld	de,(dpbptr)	; address of DPB under test
	xor	a
	ret			; found DPB format at <DE>

notdpb:	ld	de,dpherr	;cant find DPB dpb
	call	lineout
	jp	finish

;---------------;
; Find DPB area ;
;---------------;
fndfloppy:		; have found one DPB DPB, so search for other
; DPB DPB are either previous or next one
; (Old BIOS had 23 bytes)
	ld	de,-(17+7)
	ld	hl,(dpbptr)	; address of DPB under test
	add	hl,de
	push	hl
	call	tstdpb5ssibm
	pop	hl
	ld	a,1
	jr	z,frstdpb
	call	tstdpb5dsibm
	ld	a,2
	jr	z,frstdpb

	ld	de,17+7
	ld	hl,(dpbptr)	; address of DPB under test
	add	hl,de
	push	hl
	call	tstdpb5ssibm
	pop	hl
	ld	a,1
	jr	z,scnddpb
	call	tstdpb5dsibm
	ld	a,2
	jr	z,scnddpb

	jr	notdpb

frstdpb:
	jp	main

scnddpb:
	jp	main


;------------------------------
; test dpb at <HL> with DPB dpb
;------------------------------

tstdpb5ssibm:
	ld	de,dpb5ssibm
	jr	tstdpb
tstdpb5dsibm:
	ld	de,dpb5dsibm
tstdpb:	ld	b,17
chkdpb:	ld	a,(de)
	cp	(hl)
	ret	nz
	inc	hl
	inc	de
	djnz	chkdpb
	xor	a
	ret

;---------------------------------------------------------------------------;


	subttl  'S E T D S K     MENU'
	page

;---------------------------------;
; Display MENU and request option ;
;---------------------------------;
main:
	ld	a,(dbuff)	; test for command taile
	or	a
	jr	nz,ccpcmnd
retry:
	ld	de,menu
	call	lineout
;
	call	getchar
	jr	check

ccpcmnd:
	ld	hl,dbuff
	ld	b,(hl)
nxtccp:	inc	hl
	ld	a,b
	cp	1
	ld	a,(hl)
	jr	z,last1
	cp	' '
	jr	nz,syntax	; more than one character in answer
	djnz	nxtccp
nullccp:
	xor	a
	ld	(dbuff),a	; DBUFF was empty anyway
	jr	main
last1:	cp	' '
	jr	z,nullccp
;---------------------------------------------
; check character input for range '0' thru '9'
;---------------------------------------------;
check:	cp	cr
	jp	z,reboot	; <return> reboots
	cp	3
	jp	z,reboot	; <ctrl-C> reboots

	sub	'0'
	jr	c,sterr

	cp	9+1
	jr	nc,sterr	; range error

	call	process

; conclude function - if ccp command line then terminate

	ld	a,(dbuff)	; test for command taile
	or	a
	jp	nz,finish

	jr	main

;
syntax:	ld	de,ccperr	;error in command line
	call	lineout
	jp	retry

;
sterr:	ld	de,mnuer	;'0' to '9' only
	call	lineout
	jp	retry

;------------------------------
; perform process number in <A>
;------------------------------

process:
	call	table
	dw	menu0
	dw	menu1
	dw	menu2
	dw	menu3
	dw	menu4
	dw	menu5
	dw	menu6
	dw	menu7
	dw	menu8
	dw	menu9

table:	ld	e,a
	ld	d,0
	pop	hl
	add	hl,de
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,e
	jp	(hl)

;---------------
; MENU FUNCTIONS
;---------------

;---------------------
; display HELP message
;---------------------
menu0:	ld	de,helpmsg
	call	lineout
	call	getchar
	ret

;---------------------------------
; SELECT  Auto Density disk format
;---------------------------------
menu1:
;---------------------------
; select single sided format
;---------------------------
	ld	a,(format)
	and	not bit0
	ld	(format),a
	ld	hl,0
	ld	(dpbptr),hl	; set no DPB read for updating
	ret

;---------------------------
; select double sided format
;---------------------------
	ld	a,(format)
	or	bit0
	ld	(format),a
	ld	hl,0
	ld	(dpbptr),hl	; set no DPB read for updating
	ret

;------------------------
; select 256 byte sectors
;------------------------
	ld	a,(format)
	and	not (bit1 or bit2)
	or	bit1
	ld	(format),a
	ld	hl,0
	ld	(dpbptr),hl	; set no DPB read for updating
	ret

;------------------------
; select 512 byte sectors
;------------------------
	ld	a,(format)
	and	not (bit1 or bit2)
	or	bit2
	ld	(format),a
	ld	hl,0
	ld	(dpbptr),hl	; set no DPB read for updating
	ret

;------------------------
; select 1024 byte sectors
;------------------------
	ld	a,(format)
	and	not (bit1 or bit2)
	or	bit2 or bit1
	ld	(format),a
	ld	hl,0
	ld	(dpbptr),hl	; set no DPB read for updating
	ret

;-----------------------------------
; RESTORE Standard EPSON QX10 format
;-----------------------------------
menu2:
	ld	de,dpb5epson-7
	ld	bc,3*2
	jr	restore
;------------------------------------------
; RESTORE High Capacity EPSON QX10 + format
;------------------------------------------
menu3:
	ld	de,dpb5xepson-7
	ld	bc,7*2
	jr	restore
;--------------------------------
; RESTORE IBM Single Sided Format
;--------------------------------
menu4:
	ld	de,dpb5ssibm-7
	ld	bc,4*2
	jr	restore
;--------------------------------
; RESTORE IBM Double Sided Format
;--------------------------------
menu5:
	ld	de,dpb5dsibm-7
	ld	bc,5*2
restore:
	ld	hl,dpbtble
	add	hl,bc
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	or	h
	jp	z,unused
	ld	bc,-7
	add	hl,bc
	ld	bc,25+7
	ex	de,hl
	ldir			; copy standard DPB to BIOS
	ret

;----------------------
; SET select DPB format
;----------------------

menu6:
	call	finddpb		; Find selected DPB format
	jp	z,unused	; none available

;--------------------
; Change DPB settings
;--------------------
change:

;--------------------------------------
; allow format (new byte) to be changed
;--------------------------------------
setf:	ld	a,(dpb-7)
	ld	de,msgbuff+2
	call	bitb
	xor	a
	ld	(de),a		; add zero terminator

	ld	de,qry1
	call	lineout

	call	getmsg		; return response

	ld	hl,msgbuff+1
	ld	a,(hl)
	cp	8
	jr	nz,setf
	inc	hl
	call	ascb		; convert 8 bit bytes to binary
	jr	c,setf

	ld	(dpb-7),a	; and set new value

;--------------------------------
; allow NEC 765 GAP to be changed
;--------------------------------
setg:	ld	de,msgbuff+2
	ld	hl,dpb-6	; N EOT GPL DTL
	ld	b,4
setg1:
	ld	a,(hl)
	inc	hl
	call	dec3b
	ld	a,' '
	ld	(de),a
	inc	de
	djnz	setg1

	dec	de
	xor	a
	ld	(de),a		; add zero terminator

	ld	de,qry2
	call	lineout

	call	getmsg		; return response

	ld	hl,msgbuff+1
	ld	a,(hl)
	cp	15
	jr	nz,setg
	inc	hl

	ld	de,dpb-6	; N EOT GPL DTL
	ld	b,4
setg2:	call	asc3d		; convert 3 decimal bytes to binary
	jr	c,setg
	ld	(de),a		; and set new value
	inc	de
	djnz	setg2

;--------------------------;
; set sector size in pages ;
;--------------------------;

	ld	a,(dpb-6)	; N = 0 (128), 1 (256), 2 (512), 3 (1024)
	ld	b,a
	or	a
	jr	z,setg4
	xor	a
	scf
setg3:	adc	a,a		; 01h, 02h, 04h 
	djnz	setg3
setg4:	ld	(de),a		; set HIGH DTL 0, 1, 2 or 4

;---------------------------------------;
; allow physical blocking to be changed ;
;---------------------------------------;
setpb:
	ld	a,(dpb-1)
	ld	de,msgbuff+2
	call	decb
	xor	a
	ld	(de),a		; add zero terminator

	ld	de,qry3
	call	lineout

	call	getmsg		; return response

	ld	hl,msgbuff+1
	ld	a,(hl)
	cp	1
	jr	nz,setpb
	inc	hl
	call	ascd		; convert 1 byte decimal into binary
	jr	c,setpb

	ld	(dpb-1),a	; and set new value

;-------------------------------;
; allow DPB bytes to be changed ;
;-------------------------------;
setdpbs:
	ld	hl,dpb		; SPT
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	inc	hl
	ld	de,msgbuff+2
	call	hexw
	ld	a,' '
	ld	(de),a		; add space terminator
	inc	de

	ld	b,3
sdpbs1:	ld	a,(hl)		; BSH, BSL, EXM
	inc	hl
	call	hexb
	ld	a,' '
	ld	(de),a		; add space terminator
	inc	de
	djnz	sdpbs1

	ld	b,5
sdpbs2:	push	bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)		; DSM, DRM, AL0/1, CKS, OFF
	inc	hl
	call	hexw
	ld	a,' '
	ld	(de),a		; add space terminator
	inc	de
	pop	bc
	djnz	sdpbs2

	ld	b,2
sdpbs3:	ld	a,(hl)		; PSH, PSL
	inc	hl
	call	hexb
	ld	a,' '
	ld	(de),a		; add space terminator
	inc	de
	djnz	sdpbs3

	dec	de
	xor	a
	ld	(de),a		; add zero terminator

	ld	de,qry4
	call	lineout

	call	getmsg		; return response

	ld	hl,msgbuff+1
	ld	a,(hl)
	cp	44
	jr	nz,setdpbs

	inc	hl

	ld	de,dpb		; SPT
	inc	de
	call	asch
	jr	c,setdpbs
	ld	(de),a
	dec	de
	call	asch
	jr	c,setdpbs
	ld	(de),a
	inc	de
	inc	de

	ld	b,3
sdpbs4:	call	asch		; BSH, BSL, EXM
	jr	c,setdpbs
	ld	(de),a
	inc	de
	djnz	sdpbs4

	ld	b,5
sdpbs5:	inc	de
	call	asch
	jp	c,setdpbs
	ld	(de),a
	dec	de
	call	asch
	jp	c,setdpbs
	ld	(de),a		; DSM, DRM, AL0/1, CKS, OFF
	inc	de
	inc	de
	djnz	sdpbs5

	ld	b,2
sdpbs6:	call	asch
	jp	c,setdpbs
	ld	(de),a		; PSH, PSL
	inc	de
	djnz	sdpbs6

	ret

unused:
	ld	hl,0
	ld	(dpbptr),hl

	ld	de,nodpb
	call	lineout
	ret

;----------------------
; SET select DPB format
;----------------------

menu7:
	ld	hl,(dpbptr)	; location of DPB
	ld	a,h
	or	l		; test for existance
	jp	z,notassigned

	ld	de,dpb		; new DPB
	ld	bc,-7		; offset to start of X-DPB
	add	hl,bc
	ex	de,hl
	add	hl,bc		; source address - new X-DPB
	ld	bc,7+17		; length of X-DPB
	ldir			; copy over

;---------------
; update dpbtble
;---------------
	ld	(savesp),sp
	ld	sp,0
	push	hl

	ld	a,29*3		; BIOS Set Banks for following move
	ld	(BOOT+1),a
	ld	b,sysbnk	; set destination bank
	ld	c,tpabnk	; set source bank
	call	BOOT

	ld	a,25*3		; BIOS Memory to Memory Block Move
	ld	(BOOT+1),a
	ld	hl,(dpbtptr)	; set destination address
	ld	de,dpbtble	; set source address
	ld	bc,16*2		; set count
	call	BOOT
	ld	a,3
	ld	(BOOT+1),a		; restore WBOOT vector
	ld	sp,(savesp)

;--------------------------;
; completed update of BIOS ;
;--------------------------;
	ld	de,done
	call	lineout
	jp	finish

notassigned:
	ld	de,noset
	call	lineout
	ret

;--------------------
; show current option
;--------------------
menu8:
	ld	de,show
	call	lineout
	ld	a,(format)
	and	bit0
	ld	de,showss
	jr	z,menu8a
	ld	de,showds
menu8a:	call	prtstr

	ld	de,showsize
	call	prtstr

	ld	a,(format)
	and	bit1 or bit2
	ld	de,showtble
	ld	l,a
	ld	h,0
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	call	prtstr

	call	finddpb		; Find selected DPB format
	jp	z,cantdo	; none available

;-----------------------
; Display X-DPB settings
;-----------------------

	ld	a,(dpb-7)
	ld	de,showfno
	call	bitb

	ld	de,showf
	call	prtstr

;----------------
; show NEC765 ID
;----------------
	ld	de,showgno
	ld	hl,dpb-6	; N EOT GPL DTL
	ld	b,4
showg1:
	ld	a,(hl)
	inc	hl
	call	dec3b
	ld	a,' '
	ld	(de),a
	inc	de
	djnz	showg1

	ld	de,showg
	call	prtstr

;-----------------------
; show physical blocking
;-----------------------
	ld	a,(dpb-1)
	ld	de,showpbno
	call	decb

	ld	de,showpb
	call	prtstr

;---------------
; show DPB bytes
;---------------
	ld	hl,dpb		; SPT
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	inc	hl
	ld	de,showdpbno
	call	hexw
	ld	a,' '
	ld	(de),a		; add space terminator
	inc	de

	ld	b,3
showd1:	ld	a,(hl)	; BSH, BSL, EXM
	inc	hl
	call	hexb
	ld	a,' '
	ld	(de),a		; add space terminator
	inc	de
	djnz	showd1

	ld	b,5
showd2:	push	bc
	ld	c,(hl)
	inc	hl
	ld	b,(hl)		; DSM, DRM, AL0/1, CKS, OFF
	inc	hl
	call	hexw
	ld	a,' '
	ld	(de),a		; add space terminator
	inc	de
	pop	bc
	djnz	showd2

	ld	b,2
showd3:	ld	a,(hl)		; PSH, PSL
	inc	hl
	call	hexb
	ld	a,' '
	ld	(de),a		; add space terminator
	inc	de
	djnz	showd3

	ld	de,showdpb
	call	prtstr

	ld	de,showend
	call	prtstr
	call	getchar
	ret

cantdo:	; none available
	ld	de,shownone
	call	prtstr

	ld	de,showend
	call	prtstr
	call	getchar
	ret


;---------------;
; quit function ;
;---------------;
menu9:	
	ld	de,terminate
	call	lineout
	jp	finish

;------------------;
; MENU subroutines ;
;------------------;


;-------------------------
; Find selected DPB format
;-------------------------
finddpb:
	ld	hl,(dpbptr)
	ld	a,h
	or	l
	ret	nz		; DPB already found
	
	ld	a,(format)
	and	0111b		; mask sector size and sides
	add	a,a
	ld	e,a
	ld	d,0
	ld	hl,dpbtble
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	a,e
	or	d
	jr	nz,getdpb
;----------------------------
; unused DPB so use spare one
;----------------------------
	ex	de,hl
	ld	hl,(dpbtble)	; use spare DPB
	ld	a,l
	or	h
	ret	z		; but already used
	ex	de,hl
	ld	(hl),d
	dec	hl
	ld	(hl),e
	ld	hl,0
	ld	(dpbtble),hl

getdpb:
	ex	de,hl
	ld	(dpbptr),hl
	ld	de,-7
	add	hl,de
	ld	de,dpb-7
	ld	bc,7+17
	ldir			; copy over current DPB

	or	-1
	ret

;---------------------------------;
; exit program and return to CP/M ;
;---------------------------------;
reboot:
	ld	de,exitmsg
	call	lineout
finish:
	ld	c,bd$res	; BDOS System Reset
	jp	bdos		; and terminate program

;--------------------------------------------------------------------------;

	end

------------------------------------------------------------
; Customised CP/M 3 BIOS for EPSON QX-10
;
; Copyright 1982 D. Powys-Lybbe (Excludes D.R. Inc sample BIOS)
; Author: D. Powys-Lybbe, MML Systems Ltd., London
; Date: 7th June 1983
;
;------------------------------------------------------------------
; Revisions
; =========
; ALPHA Aug 8,83
; BETA+ Jan 5,84
;       Feb 16,84 400k disc format added
;       Feb 23,84 minor alterations
;	Apr 19,84 delay added to motor-on
; REV-A Apr 30,84
;	May  6,84 added 3.5in as drive C/D (configure option)
;	May 20,84 added 3.5in head load
;
; Note:
; =====
; To avoid conflict with GENCPM, the resident entry points
; must not be public.
;------------------------------------------------------------------

;-------------------------------
; disk parameter headers (DPH's)
;-------------------------------

	public	dph0			; A: QX-10 NEC 765 floppy drives
	public	dph1			; B: QX-10 NEC 765 floppy drives
	public	dph2			; C: Optional Epson 3.5" floppy drives
	public	dph3			; D: Optional Epson 3.5" floppy drives

;-----------------------
; CP/M 3 CBIOS externals
;-----------------------

; disk communication data items

	extrn	@dtbl			; table of pointers to XDPH's
	extrn	@adrv,@trk,@sect,@scnt	; parameters for disk I/O
	extrn	@dma,@dbnk		;    "       "    "    "

	extrn	@retries		; Number of retries remaining
	extrn	@rdwr			; disc READ or WRITE flag
	extrn	@wrdc			; BDOS write deblocking codes

; memory control

	extrn	@cbnk,@sbnk,@tbnk	; current, system and tpa bank number
	extrn	?xmove,?move,@xbc	; select move bank & block move
	extrn	?tpabnk,?sysbnk		; select TPA or SYS bank
	extrn	?bank			; select bank in <A>
	extrn	@bnkno			; table of epson bank numbers (0-3)
	extrn	?goint			; conditional switch to system bank
	extrn	?reti			; conditional restore of callers bank

; general utility routines

	extrn	?pmsg			; print message @<SP>
	extrn	?pdec			; print 16 bit number in <HL>
	extrn	?idle			; called whenever waiting on hardware

; common memory

	extrn	@cpage			; -> base page of common memory

; External names for BIOS entry points defined in CBIOS.MAC

	extrn	?boot,?wboot
	extrn	?home,?sldsk,?sttrk,?stsec,?stdma,?read,?write
	extrn	?sctrn
	extrn	?dvtbl,?drtbl
	extrn	?mltio,?flush,?mov,?tim,?bnksl,?stbnk,?xmov

; External names for BIOS entry points which use COMMONSP

	extrn	?const,?conin,?cono,?conos

; External names in BDOS System Control Block

	extrn	@CMBA		; Common memory base address

;------------------------------------------------------------------------
; Conditional parameters
; ======================

false	equ	0
true	equ	not false

eight	equ	false		; Not using 8 in diskettes
five	equ	true		; Using 5 in diskettes
three	equ	true		; Using 3.5 in diskettes

interrupt	equ	false	; set true if NEC interrupts required

;------------------------------------------------------------------------

	cseg

bit0	equ	1 shl 0
bit1	equ	1 shl 1
bit2	equ	1 shl 2
bit3	equ	1 shl 3
bit4	equ	1 shl 4
bit5	equ	1 shl 5
bit6	equ	1 shl 6
bit7	equ	1 shl 7

	maclib	CBIOS.EQU	; QX-10 hardware ports and equates


;------------------------------------------------------------------------
	page

;		===============
;		DISC DATA AREAS
;		===============

;--------------------------------------------------------------
;
; CP/M disc parameters
;
;--------------------------------------------------------------

;-----------------------------------------------------------
; dph for drives A:, B:, C: & D:
; NB: if GENCPM sets up CSV  then DRM must be defined in DPB
;     if GENCPM sets up ALV  then DSM must be defined in DPB
;     if GENCPM sets up BCBs then PSH must be defined in DPB
;     if GENCPM sets up HASH then DRM must be defined in DPB
; dph's must be initialised to largest possible configuration
;
; Extended DPH parameters:
;    -10	1 word	Address of ERROR PROCESSING routine
;     -8	1 word	Address of DISC RD/WR routine
;     -6	1 word	Address of DISC SELECT routine
;     -4	1 word	Address of COLD BOOT INIT routine
;     -2	1 byte	Physical device unit number
;     -1	1 byte	Physical format or type of disc selected
;-----------------------------------------------------------------

	dseg		; may be in system bank

gencpm	equ	0fffeh		; Flag set for GENCPM to allocate data
;------------------------------------------------------------------------
; physical data
; dph -1 Format Byte:
;		bit 0 = 1 for double sided drives
;		bit 1 } Sector 00b = 128, 01b = 256 (00b is single density)
;		bit 2 } Size   10b = 512, 11b = 1024 bytes
;		bit 3 = 1 for either 8in or 3.5in discs
;		bit 4 = 1 for cylinder format
;		bit 5 = 1 for S800 drive which is ignorant of side select
;		bit 6 = 1 for double density drives (not used)
;		bit 7 = 1 to use skew table
; dph -2 = physical device unit number
; dph -3 = address of COLD BOOT INIT routine
; dph -5 = address of select driver (initialised at cold boot) 
; dph -7 = address of rd/wr driver (initialised at cold boot) 
; dph -9 = address of error routine
;------------------------------------------------------------------------

;--
;A:
;--
	dw	NECerr		; address of error routine
	dw	NEC765		; address of disc rd/wr driver
	dw	selNEC765	; address of disc select driver
	dw	NECinit		; address of disc init driver
	db	0		; Physical device unit number (left 5 in)
	db	0		; Physical selected device format
dph0:	dw	0		; XLT
	ds	9		; scratch area (72 bits of zero)
	db	0		; Media Flag (Gate opened)
	dw	dpbmax		; disk parameter block - used by GENCPM
	dw	gencpm		; CSV - allocated by GENCPM
	dw	gencpm		; ALV - allocated by GENCPM
	dw	gencpm		; DIRBCB0 - allocated by GENCPM
	dw	gencpm		; DTABCB0 - allocated by GENCPM
	dw	gencpm		; HASH0 - allocated by GENCPM
	db	0		; HBANK0 - allocated by GENCPM
	
;--
;B:
;--
	dw	NECerr		; address of error routine
	dw	NEC765		; address of disc rd/wr driver
	dw	selNEC765	; address of disc select driver
	dw	NECinit		; address of disc init driver
	db	1		; Physical device unit number (right 5in)
	db	0		; Physical selected device format
dph1:	dw	0		; XLT
	ds	9		; scratch area
	db	0		; Media Flag (gate opened)
	dw	dpbmax		; disk parameter block - used by GENCPM
	dw	gencpm		; CSV - allocated by GENCPM
	dw	gencpm		; ALV - allocated by GENCPM
	dw	gencpm		; DIRBCB1 - allocated by GENCPM
	dw	gencpm		; DTABCB1 - allocated by GENCPM
	dw	gencpm		; HASH1 - allocated by GENCPM
	db	0		; HBANK1 - allocated by GENCPM
	
;--
;C:
;--
	dw	NECerr		; address of error routine
	dw	NEC765		; address of disc rd/wr driver
	dw	selNEC765	; address of disc select driver
	dw	NECinit		; address of disc init driver
	db	0		; Physical device unit number (left 5in)
;******	db	2		; Physical device unit number (left 3in unit)
	db	0		; Physical selected device format
dph2:	dw	0		; XLT
	ds	9		; scratch area
	db	0		; Media Flag (gate opened)
	dw	dpbmax		; disk parameter block - used by GENCPM
	dw	gencpm		; CSV - allocated by GENCPM
	dw	gencpm		; ALV - allocated by GENCPM
	dw	gencpm		; DIRBCB2 - allocated by GENCPM
	dw	gencpm		; DTABCB2 - allocated by GENCPM
	dw	gencpm		; HASH2 - allocated by GENCPM
	db	0		; HBANK2 - allocated by GENCPM

;--
;D:
;--
	dw	NECerr		; address of error routine
	dw	NEC765		; address of disc rd/wr driver
	dw	selNEC765	; address of disc select driver
	dw	NECinit		; address of disc init driver
	db	1		; Physical device unit number (right 5in)
;******	db	3		; Physical device unit number (right 3in unit)
	db	0		; Physical selected device format
dph3:	dw	0		; XLT
	ds	9		; scratch area
	db	0		; Media Flag (gate opened)
	dw	dpbmax		; disk parameter block - used by GENCPM
	dw	gencpm		; CSV - allocated by GENCPM
	dw	gencpm		; ALV - allocated by GENCPM
	dw	gencpm		; DIRBCB3 - allocated by GENCPM
	dw	gencpm		; DTABCB3 - allocated by GENCPM
	dw	gencpm		; HASH3 - allocated by GENCPM
	db	0		; HBANK3 - allocated by GENCPM

	dseg
;---------------------------------------------;
; ========== Disk Parameter Blocks ========== ;
;                                             ;
; table of floppy disc parameter blocks       ;
; indexed: bit0=side, bit1&2=size, bit3=8/5   ;
;   or by: bit0=side, bit1&2=size, bit3=3.5/5 ;
;---------------------------------------------;
dpbtble:
if	five		; If using 5 in drives
	dw	dpb5sssdsr	; ss sd sr 5" (128 bytes)
	dw	dpbunused	; ds sd sr 5" (128 bytes)
	dw	dpbunused	; ss dd sr 5" (256 bytes)
	dw	dpb5epson	; ds dd sr 5" (EPSON - 256 bytes)
	dw	dpb5ssibm	; ss dd dr 5" (IBM s/side 512 bytes)
	dw	dpb5dsibm	; ds dd dr 5" (IBM d/side 512 bytes)
	dw	dpbunused	; ss dd sr 5" (1024 bytes)
	dw	dpb5xepson	; ds dd sr 5" (EPSON+ - 1024 bytes)
else
	dw	dpbunused	; ss sd sr 5" (128 bytes)
	dw	dpbunused	; ds sd sr 5" (128 bytes)
	dw	dpbunused	; ss dd sr 5" (256 bytes)
	dw	dpbunused	; ds dd sr 5" (EPSON - 256 bytes)
	dw	dpbunused	; ss dd dr 5" (IBM s/side 512 bytes)
	dw	dpbunused	; ds dd dr 5" (IBM d/side 512 bytes)
	dw	dpbunused	; ss dd sr 5" (1024 bytes)
	dw	dpbunused	; ds dd sr 5" (EPSON+ - 1024 bytes)
endif
if	three		; If using 3.5 in drives
	dw	dpbunused	; ss sd sr 3.5" (128 bytes)
	dw	dpbunused	; ds sd sr 3.5" (128 bytes)
	dw	dpbunused	; ss dd sr 3.5" (256 bytes)
	dw	dpb3epson	; ds dd sr 3.5" (EPSON - 256 bytes)
	dw	dpb3ssibm	; ss dd dr 3.5" (IBM s/side 512 bytes)
	dw	dpb3dsibm	; ds dd dr 3.5" (IBM d/side 512 bytes)
	dw	dpbunused	; ss dd sr 3.5" (1024 bytes)
	dw	dpb3xepson	; ds dd sr 3.5" (EPSON+ - 1024 bytes)
else
	dw	dpbunused	; ss sd sr 3.5" (128 bytes)
	dw	dpbunused	; ds sd sr 3.5" (128 bytes)
	dw	dpbunused	; ss dd sr 3.5" (256 bytes)
	dw	dpbunused	; ds dd sr 3.5" (EPSON - 256 bytes)
	dw	dpbunused	; ss dd dr 3.5" (IBM s/side 512 bytes)
	dw	dpbunused	; ds dd dr 3.5" (IBM d/side 512 bytes)
	dw	dpbunused	; ss dd sr 3.5" (1024 bytes)
	dw	dpbunused	; ds dd sr 3.5" (EPSON+ - 1024 bytes)
endif
if	eight		; If using 8 in drives
	dw	dpb8sssd	; ss sd sr 8" 128 bytes (IBM 3270)
	dw	dpb8dssd	; ds sd sr 8" 128 bytes
	dw	dpb8ssdd	; ss dd sr 8" 256 bytes (IBM system 34)
	dw	dpb8dsdd	; ds dd sr 8" 256 bytes
	dw	dpbunused	; ss dd dr 8" 512 bytes (not used)
	dw	dpbunused	; ds dd dr 8" 512 bytes (not used)
	dw	dpbunused	; ss dd dr 8" 1024 bytes (not used)
	dw	dpbunused	; ds dd dr 8" 1024 bytes (not used)
else
	dw	dpbunused	; ss sd sr 8" 128 bytes (IBM 3270)
	dw	dpbunused	; ds sd sr 8" 128 bytes
	dw	dpbunused	; ss dd sr 8" 256 bytes (IBM system 34)
	dw	dpbunused	; ds dd sr 8" 256 bytes
	dw	dpbunused	; ss dd dr 8" 512 bytes (not used)
	dw	dpbunused	; ds dd dr 8" 512 bytes (not used)
	dw	dpbunused	; ss dd dr 8" 1024 bytes (not used)
	dw	dpbunused	; ds dd dr 8" 1024 bytes (not used)
endif

	cseg		; must be in common

;-----------------------------------------------------------------
; Disk Parameter Blocks
;
; Extended DPB parameters (in brackets NEC parameter):
;     -7        1 byte  Format byte (sets cylinder mode, 3.5in etc)
;     -6	1 byte	(N) 128 byte sectors
;     -5	1 byte  (EOT) Top sector number on track
;     -4	1 byte	(GPL) Gap length
;     -3	1 word	(DTL) Size of physical sector
;     -1	1 byte	Physical blocking shift factor (0=*1, 1=*2, 2=*4 etc)
; Blocking factor:
; 1. This is used to block physical sectors together into one
;    physical BIOS sector as described by PSH and PHM.
; 2. Thus PSH-BLOCKING = real shift factor.
; 3. The suggested optimum size of this physical BIOS sector
;    is the size of the datablock (1k,2k,etc), however in order to
;    minimise LRU buffer space, a 1k size is used.
;-----------------------------------------------------------------

dpbunused	equ	0	; no DPB assigned (23may84)


;--------------------------------------------------------;
; DPBMAX  - This dpb is constructed with the maximum     ;
; value for each field of all the possible dpb's.        ;
;                                                        ;
; if GENCPM sets up CSV  then CKS must be defined in DPB ;
; if GENCPM sets up ALV  then DSM must be defined in DPB ;
; if GENCPM sets up BCBs then PSH must be defined in DPB ;
; if GENCPM sets up HASH then DRM must be defined in DPB ;
;--------------------------------------------------------;

dpbmax:				; Contains maximum value for GENCPM
 	dw	0		; SPT
	db	0,0		; BSH,BLM
	db	0		; EXM
if	eight		; Using 8 in diskettes
	dw	247-1		; DSM (8in DS-DD)
	dw	128-1		; DRM (8in DS-DD)
	db	0,0		; AL0, AL1
	dw	32		; CKS (8in DS-DD)
else
	dw	200-1		; DSM (5in EPSON+)
	dw	128-1		; DRM (5in EPSON+)
	db	0,0		; AL0, AL1
	dw	32		; CKS (5in EPSON+)
endif
	dw	0		; OFF
	db	3,7		; PSH, PHM (1K blocksize)


;==========================================;
; DPB for each implemented diskette format ;	
;==========================================;

if	five		; Using 5in diskettes

	db	bit7		; Format structure 23may84
	db	0		; (N) 128 byte sectors
	db	18		; (EOT) top sector number on track
	db	07h		; (GPL) gap length
	dw	128		; (DTL) physical sector size
	db	0		; Blocking shift factor (0=*1)
;-----------------------------------------------------------------
dpb5sssdsr:			; 5 IN SINGLE SIDED SINGLE DENSITY
;-----------------------------------------------------------------
	dw	18		; sectors per track
	db	3,7		; block mask
	db	0		; ex mask
	dw	83-1		; max block number
	dw	32-1		; max dir entries-1
	db	080h,0		; alloc1/2
	dw	8		; checksize
	dw	3		; track offset
	db	0,0		; deblock mask

	db	bit4		; Format structure 23may84 - cylinder mode
	db	1		; (N) 256 byte sectors
	db	16		; (EOT) top sector number on track
	db	0eh		; (GPL) gap length
	dw	256		; (DTL) physical sector size
	db	2		; Blocking shift factor (256 * 4)
;-----------------------------------------------------------------
dpb5epson:			; 5 IN DOUBLE SIDED DOUBLE DENSITY
;-----------------------------------------------------------------
	dw	16*2		; sectors per track
	db	4,15		; block mask (2k)
	db	1		; ex mask
	dw	140-1		; max block number
	dw	64-1		; max dir entries-1
	db	080h,0		; alloc1/2
	dw	16		; checksize
	dw	4*2		; track offset (both sides)
	db	3,7		; deblock mask (1k)

;------------------------------------------------------------------------
; EPSON high capacity disc
; Has no system tracks and uses 5 sectors of 1k bytes each
;------------------------------------------------------------------------
	db	bit4		; Format structure 23may84 - cylinder mode
	db	3		; (N) 1024 byte sectors
	db	5		; (EOT) top sector number on track
	db	35h		; (GPL) gap length (IBM 2D)
	dw	1024		; (DTL) physical sector size
	db	0		; Blocking shift factor (1024 * 1)
;----------------------------------------------------------------------
dpb5xepson:			; 5 IN DOUBLE SIDED DOUBLE DENSITY 400k
;----------------------------------------------------------------------
	dw	5*8		; sectors per track
	db	4,15		; block mask (2k)
	db	1		; ex mask
	dw	200-1		; max block number
	dw	128-1		; max dir entries-1
	db	0c0h,0		; alloc1/2
	dw	32		; checksize
	dw	0		; track offset
	db	3,7		; deblock mask (1k)

;------------------------------------------------------------------------
; IBM compatible formats - IBM PC (8 sectors per track)
; (NOTE Under MSDOS IBM has changed the sectors per track
;  from 8 to 9 for MSDOS II and alternatives are shown in brackets)
;------------------------------------------------------------------------
	db	0		; Format structure 23may84
	db	2		; (N) 512 byte sectors
	db	8		; (EOT) (9) top sector number on track
	db	2ah		; (GPL) gap length
	dw	512		; (DTL) physical sector size
	db	1		; Blocking shift factor (512 * 2)
;----------------

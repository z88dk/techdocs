	.z80
	title	EPSON QX-10 CPM3 BIOS disc drivers

	name	('BIOS3A5')

;------------------------------------------------------------------
; Customised CP/M 3 BIOS for EPSON QX-10
;
; Copyright 1982 D. Powys-Lybbe (Excludes D.R. Inc sample BIOS)
; Author: D. Powys-Lybbe, MML Systems Ltd., London
; Date: 7th June 1983
;
;------------------------------------------------------------------
; Revisions
; =========
; A	Jun 83 - Based on Xerox version C
; ALPHA Aug 8,83
;    27 Aug 83 - MDISK corrected to work with 2 banks
;              - FLoppy disk time delay corrected
;
; Note:
; =====
; To avoid conflict with GENCPM, the resident entry points
; must not be public.
;------------------------------------------------------------------



;----------------------------------------------------------------

	cseg

bit0	equ	1 shl 0
bit1	equ	1 shl 1
bit2	equ	1 shl 2
bit3	equ	1 shl 3
bit4	equ	1 shl 4
bit5	equ	1 shl 5
bit6	equ	1 shl 6
bit7	equ	1 shl 7

	dseg
	ld	de,dph12
	call	?selram
	ret

	ds	32

	ret
	ret

	page

;		===============
;		DISC DATA AREAS
;		===============

;--------------------------------------------------------------
;
; CP/M disc parameters
;
;--------------------------------------------------------------

	cseg		; helpful to be in common
@adrv:	db	-1		; Logical drive
@trk:	dw	-1		; Track number
@sect:	dw	-1		; Sector number (base 0)
@dma:	dw	-1		; Address of sector buffer for transfer
	cseg		; must be in common for RAM rd/wr
@dbnk:	db	-1		; Bank for @dma transfer
rdwr:	db	-1	; read/write flag


;M:
	cseg	; testing 28aug

	dw	RAMerr		; address of error routine
	dw	0,0		; address of disc select and rd/wr driver
	db	0,0		; Physical data saved here
dph12:	dw	0		; no XLT
	ds	9		; scratch area
	db	0		; Media Flag (gate opened)
	dw	dpbmram		; disk parameter block
	dw	0fffeh		; CSV - allocated by GENCPM
	dw	0fffeh		; ALV - allocated by GENCPM
	dw	0fffeh		; DIRBCB7 - allocated by GENCPM
	dw	0fffeh		; DTABCB7 - allocated by GENCPM
	dw	0fffeh		; HASH7 - allocated by GENCPM
	db	0		; HBANK7 - allocated by GENCPM

	cseg

	dw	128		; physical sector size
dpbmram:		; banked memory silicon disc
	dw	(64-8)*(1024/128)	; sectors per track or bank
	db	3,7		; block mask
	db	0		; ex mask
	dw	(56*2)-1	; max block number
	dw	32-1		; max dir entries-1
	db	080h,0		; alloc1/2
	dw	8		; checksize (just in case memory corrupted)
	dw	2		; track/bank offset
	db	0,0		; deblock mask



	page
;---------------------------------------------------------------
;               RAM DRIVERS
;---------------------------------------------------------------

setbnk	equ	0110b shl 2	;Write Memory bank register and timers
prom	equ	0111b shl 2	;PROM memory select
cmos	equ	1000b shl 2	;CMOS memory select
getbnk	equ	1100b shl 2	;Read bank/fdd status

;---------------------------------------------------------------------
; ram select
; Entry:	<DE> -> dph
; 		<DE>-1 = format code
; 		<DE>-2 = physical unit
; Returns:	<HL> = dph if successful
;		<HL> = 0 if unsuccessful
;		<A> = 0 if successful
;		<A> > 0 if unsuccessful and retries possible
;---------------------------------------------------------------------
	cseg	; testing 28aug

?selram:
;	1/ test if memory exists
;	2/ test for valid directory

	call	dpbptr		; returns address of dpb in <BC>
	ld	hl,13		; offset to bank (track) offset
	add	hl,bc
	ld	a,(hl)
	ld	(@trk),a
	ld	(@dbnk),a

	push	bc		; save dpb
	push	de		; save dph
	call	testram		; see if this track exists
	pop	de		; recover dph
	pop	bc		; recover dpb
	jr	z,goodram	;-yes- so have ram

; not valid ram
	ld	hl,5		; offset to LOW size of disc -1
	add	hl,bc		; (<BC> -> dpb)
	push	bc
	ld	a,(@cpage)	; start of common memory
	rrca
	rrca			; /4 to give no of 1k blocks
	ld	b,a
	ld	a,(hl)		; up track offset to next bank
	sub	b		; reduce by size of 1 bank
	pop	bc
	jr	c,badram	; no ram left
	ld	(hl),a		; decrement ram size
;
	ld	hl,13		; offset to bank (track) offset
	add	hl,bc
	inc	(hl)		; up track offset to next bank
;
	jr	?selram		; and repeat test on next bank

;-------
testram:		; check if ram exists for track (@trk)

	ld	hl,(@cbuff)	; our DMA area
	ld	(@dma),hl

	ld	hl,tstalc
	ld	(hl),0
	ld	de,tstalc+1
	ld	bc,lenalc-1
	ldir			; zero our alloc vector 

	ld	hl,0		; set sector count to zero
	call	rdram		; read 1st sector
; test ram
	ld	hl,(@cbuff)
	ld	a,(hl)		; test 1st byte
	push	af		; and save for later
	xor	-1
	ld	(hl),a		; switch bytes
	ld	hl,0		; set sector count to zero
	call	wrram		; write to memory bank	
	ld	hl,0		; set sector count to zero
	call	rdram		; read back in
	ld	hl,(@cbuff)
	ld	a,(hl)
	xor	-1
	ld	(hl),a
	pop	af
	cp	(hl)		; test if byte changed
	ret	nz		; -no- track dont exists
	ld	hl,0		; set sector count to zero
	call	wrram		; so write back correct record
	ret			; return cf=z as good ram

badram:		; no ram left - return bad select no retries possible
	xor	a
	ld	h,a
	ld	l,a
	ret

;-------
goodram:		; 1st byte in RAM worked

; now find size of ram (on entry <BC> -> dpb, <DE> -> dph)

	ld	hl,5		; offset to LOW size of disc -1
	add	hl,bc
	ld	a,(@cpage)	; start of common memory
	rrca
	rrca			; /4 to give no of 1k blocks
	ld	b,a		; save size of track in 1k blocks
	ld	c,(hl)		; save total capacity
	dec	b		; requires size-1
	ld	(hl),b		; set ram size to one tracks worth
	sub	c		; c = remaining 1k blocks
	jr	nc,ramdir	; none remaining so at end of ram
;
topram:
	push	hl		; save -> directory size in tracks-1
	push	bc
	ld	hl,@trk
	inc	(hl)		; increment to next track
	push	de		; save dph
	call	testram		; see if this track exists
	pop	de		; recover dph
	pop	bc
	pop	hl
	jr	nz,ramdir
	ld	a,(hl)
	add	a,b		; up by size of track in 1k's
	ld	(hl),a		; set ram size to one tracks worth
	ld	a,c
	sub	b
	ld	c,a		; save remaing size
	jr	c,ramdir	; none left so at end of possible ram
	jr	topram		;-yes- so maybe more tracks

; test for valid directory (on entry <DE> -> dph)

ramdir:
	ld	hl,(@cbuff)
	ld	b,4
nxtfcb:	ld	c,11		; set <C> ready for tstnm
	ld	a,(hl)
	cp	0e5h
	jr	z,mrkera
	cp	31+1		; max user no
	jr	c,tstnm
	ld	a,b
	cp	1		; could be password if <b> = 1
	jr	nz,notfcb
	jr	mrkera		; so as all others ok, ignore

tstnm:	inc	hl
	ld	a,(hl)
	and	07fh		; mask parity flag
	cp	' '		; test for character 
	jr	c,notfcb
	dec	c
	jr	nz,tstnm

	inc	hl		; <HL> -> ex
	inc	hl		; <HL> -> s1
	inc	hl		; <HL> -> s2
	inc	hl		; <HL> -> rc

	ld	c,16
tstdb:	inc	hl
	ld	a,(hl)
	cp	(56*2)		; test less than maximum number of blocks
	jr	nc,notfcb
	or	a
	jr	z,zrodb
	and	not (8-1)
	rrca			; /2
	rrca			; /4
	rrca			; /8
	push	bc
	ld	c,a
	ld	b,0
	ld	a,(hl)
	and	(8-1)		; mask bit 0-7
	push	hl
	ld	hl,tstalc
	add	hl,bc
	inc	a
	ld	b,a
	ld	a,80h
shift:	rlca
	dec	b
	jr	nz,shift
	ld	b,a
	ld	a,(hl)
	and	b
	jr	nz,alocerr
	ld	a,(hl)
	or	b
	ld	(hl),a
	pop	hl
	pop	bc
zrodb:	dec	c
	jr	nz,tstdb
	jr	tstok

alocerr:
	pop	hl
	pop	bc
	jr	notfcb
tstalc:	ds	((56*2)+7)/8	; check alloc table
lenalc	equ	$-tstalc

mrkera:	push	bc
	ld	bc,32-1		; skip to end of fcb
	add	hl,bc
	pop	bc

tstok:	inc	hl		; <HL> -> usr
	dec	b
	jr	nz,nxtfcb

; 1st sector contains valid directory, so leave well alone

	ex	de,hl		; move dph to <HL>
	xor	a
	ret			; return (directory looks ok)

; error found in first sector of directory
; so erase directory

notfcb:
	push	de		; save dph
	call	dpbptr		; returns address of dpb in <BC>
	ld	hl,13		; offset to bank (track) offset
	add	hl,bc
	ld	a,(hl)
	ld	(@trk),a	; go back to directory track

	ld	hl,(@cbuff)
	ld	(hl),0e5h
	ld	d,h
	ld	e,l
	inc	de
	ld	bc,128-1
	ldir			; fill buffer with 0e5h

	ld	b,8		; check size
	ld	hl,0		; start of directory
nxtdir:	push	bc
	push	hl
	call	wrram		; write directory sector
	pop	hl
	ld	bc,128
	add	hl,bc
	pop	bc
	dec	b
	jr	nz,nxtdir

	pop	hl		; recover dph into <HL>

; **** later- should check on size of memory ****

	xor	a
	ret			; done select and erase directory

;--------------------------------
; returns address of dpb in <BC>
; entry:	<DE> = dph
; destroys:	<HL>
dpbptr:	ld	hl,12		; offset to dpb
	add	hl,de
	ld	c,(hl)
	inc	hl
	ld	b,(hl)		; <BC> -> dpb
	ret

;--------------------------------------------------------------------
;                    ram ERRORS
;
; Input: 	<A> = ram error bits		 
;
; Returns:	<A> = 1		Return to BIOS for error condition
;
ramerr:
	ld	a,1		; whatever the error report to BDOS
	ret

;-----------------------------------------------------------------------
; ram
; Inputs:	<DE> -> dph
; 		<DE>-1 = disc format
; 		<DE>-2 = physical unit
; Returns:	<A> = 0 if no error, else <A> = 1 address outside range
;
; ram disc is configured as tracks of 56k banks, sectors of 128 bytes
; physical unit is defined as 2 for bank 2 (was E:) or 3 for bank 3 F:)
;
; Uses common memory at location (@cbuff) for DMA buffer
;-----------------------------------------------------------------------

?ram:
; calculate physical address (3 bytes max)
	ld	hl,(@sect)	; sectors
	add	hl,hl		;*2
	add	hl,hl		;*4
	add	hl,hl		;*8
	add	hl,hl		;*16
	add	hl,hl		;*32
	add	hl,hl		;*64
	add	hl,hl		;*128

	ld	a,(@cpage)	; base of common memory
	cp	h		; check if in common
	jr	z,noram
	jp	nc,goram	; do I/O in common

; errors etc. ram address is outside range 0000h and 0efffh

noram:
	ld	a,1
	or	a
	ret			; set i/o error 


;-----------
; ram  IO
; Entry:	<HL> = start of ram disc
;	 	@trk = ram disc bank
; 		@dbnk = dma bank
;	 	@dma = dma address
; 		rdwr = direction
; Returns:	<A> = 0 (successful)
; Transfers:	128 bytes
;
; MUST BE IN COMMON MEMORY
;
	cseg
goram:
	ld	a,(rdwr)
	or	a
	jr	z,wrram

rdram:	ld	a,(@trk)	; select ram bank
	call	?bank

	ld	de,(@cbuff)	; use common data area for transfer
	ld	bc,128
	ldir

	ld	a,(@dbnk)
	call	?bank

	ld	hl,(@dma)
	ex	de,hl
	ld	hl,(@cbuff)
	ld	bc,128
	ldir

	call	?sysbnk		; return to system bank
	xor	a
	ret

wrram:	ld	a,(@dbnk)
	call	?bank

	push	hl		; save ram address
	ld	hl,(@dma)
	ld	de,(@cbuff)
	ld	bc,128
	ldir
	pop	de		; recover in <DE>

	ld	a,(@trk)	; select ram bank
	call	?bank

	ld	hl,(@cbuff)	; use upper area for transfer
	ld	bc,128
	ldir

	call	?sysbnk		; return to system bank
	xor	a
	ret


	page

;------------------------------------------------------------------
;
;	Various equates
;
;------------------------------------------------------------------

@cpage:	db	0f0h
@cbuff:	dw	0ff00h


;====================================================================
; I/O Selector - MAIN SYSTEM
; Device is selected by address lines A2, A3, A4, A5 with A6, A7 zero
; Address lines A0 and A1 are optional used to control the device
;====================================================================


setbnk	equ	0110b shl 2	;Write Memory bank register and timers
getbnk	equ	1100b shl 2	;Read bank/fdd status

;-----------------------------------------------------------------
;
;	Memory and Bank routines
;
; move		Memory move for large memory copy
; xmove		Set banks for following MOVE function
; selmem	Select alternative bank of memory (and save in @cbnk)
; setbnk	Select bank for DMA operation
;
;       Time routine
; time		Support date/time clock
;
;	Local BIOS routines
; ?tpabnk		; Select TPA bank
; ?sysbnk		; Select SYS bank
; ?bank			; Select bank specified in <A>
;
; @tbnk			; tpa bank number (in unbanked = 0)
; @sbnk			; system bank number (in unbanked = 0)
; @cbnk			; current bank number (in unbanked = 0)
;-----------------------------------------------------------------


;---------------
; SELMEM  (27)	Select memory bank
; Input		a  = Bank to be selected
; Returns	ALL REGISTERS OTHER THAN <A> MUST BE PRESERVED
;
; EPSON QX-10 supports up to 5 banks:
; Bank 0 - System Bank (0000h - EFFFh) (NB this is EPSON CP/M tpa bank)
; Bank 1 - TPA Bank    (0000h - EFFFh) (NB this is EPSON CP/M system bank)
; Bank 2 - Optional E: (0000h - EFFFh)
; Bank 3 - MBASIC or F: (0000h - EFFFh)
; CMOS   - 2k           (8000h - 8800h)
; (NOTE when CMOS selected DRAM is usuable below 8000h)
; Common -  4k	       (F000h - FFFFh)
; (NOTE common size can be changed by jumper J4
; PROM   -  2k         (0000h - 0800h)
;
; DRAM bank is selected by high nibble of out (18h)
; DRAM in use can be read from high nibble of in (30h)
;
; PROM is selected/disabled by set/clear bit 0 of out (1ch)
; CMOS is selected/disabled by set/clear bit 0 of out (20h
;

	cseg
@bnkno:	db	00010000b	; bank 0
	db	00100000b	; bank 1
	db	01000000b	; bank 2
	db	10000000b	; bank 3
;(note: 00000000b turns off ALL banks)

selmem:	cp	2
	ret	nc		; only banks 0 an 1 allowed
?bank:
	ld	(@cbnk),a	; remember as current bank
	push	hl
	ld	hl,@bnkno
	add	a,l
	ld	l,a
	ld	a,0
	adc	a,h
	ld	h,a
	ld	a,(hl)	; move selected bank to high nibble
	pop	hl
bank:
	out	(setbnk),a
	ret


?sysbnk:
	ld	a,0	; Select TPA bank (default is unbanked system)
@sbnk	equ	$-1	; system bank (1 = banked, 0 = unbanked)
	jr	?bank

?crnbnk:	; no longer used
	ld	a,0	; Select bank specified in @CBNK (default is TPA)
@cbnk	equ	$-1	; current bank (0 = banked tpa, 1 = banked system)
	jr	?bank

?tpabnk:
	ld	a,0	; Select TPA bank (default is unbanked system)
@tbnk	equ	$-1	; tpa bank (0 = banked, 0 = unbanked)
	jr	?bank

;--------------------------------------------------------------------

	end


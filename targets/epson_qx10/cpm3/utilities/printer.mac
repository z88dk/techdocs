	.z80
	title	EPSON QX-10 - SET THE PRINTER PREPROCESSOR

	name	('PPP')

	vers	Equ	1	;current version
;------------------------------------------------------------------
; EPSON QX-10 Utility to Alter the printer settings from the console
;
; Author: A. Clarke, 11 Sun Street, London E.C.2.
; Date: 15th February 1984
;------------------------------------------------------------------

	cseg

;------------------------------------------------------------------
;
;	Various equates
;
;------------------------------------------------------------------

vers22	equ	22h	; CP/M version number
vers31	equ	31h	; CP/M version number
rev	equ	'A'	; Utility version

bios	Equ	0001h
bdos	Equ	0005h
boot	Equ	0000h
dfcb	Equ	005ch
dbuf	Equ	0080h


;*** logical constants ***
false	Equ	0000h		;not true
true	Equ	0ffh		;not exactly false


;*** ascii codes ***
cr	Equ	0dh		;carriage return
lf	Equ	0ah		;line feed
eof	Equ	1ah		;end of file code
ff	Equ	0ch
esc	Equ	1bh		;escape char for cursor control
bspace	Equ	08		;backspace
tab	Equ	09h		;tab

;*** Arrow Key Assignments ***

Up.Arrow	Equ	1eh
Down.Arrow	Equ	1fh
Left.Arrow	Equ	1dh
Right.Arrow	Equ	1ch

;*** Direct BIOS offsets ***

CI	Equ	6
CO	Equ	9
LI	Equ	12

;---------------------------------------------------------------
;Variables
;--------------------------------------------------------------
	
column:	db	00		;column on vdu
line:	db	00		;line on vdu
margin:	db	00
startline:db	00
str.array:DW	00
offset:	DW	00
highlt:	db	00
flip.flop:db	0ffh
Ch.Starting:	db	' '
Ch.Finishing:	db	' '
selection:	db	00


;---------------------------------------------------------------
;
;Machine-specific graphics and console routines
;
;---------------------------------------------------------------

;*** cursor control codes ***
	db	'Copyright MML Ltd (c) 1983'

;*** all patches as in wordstar ***
clear:	defb	02,27,'+',00,00,00;clear screen string
clead1:	defb	02,27,61,00	;yx cursor addressing lead-in
linoff:	defb	20h		;offset to add
coloff:	defb	20h



;*** other vdu patches in addition ***
char.starting.highlight:
	DB	'('
;for menu selection
char.finishing.highlight:
	DB	')'
;for menu selection
	
uscore:	db	'_'
ivonÂº	db	02,27,"0",00,00,00,00
ivoff:	db	04,27,"1",27,"5",00,00
ivon2:	db	02,27,"4",00,00,00,00 


;cursor turn off/on strings
on.cursor:defb	02,1bh,'3',00	;switch on the cursor
off.cursor:defb	02,1bh,'2',00	;switch off the cursor

;screen switching strings
upper.screen:defb	2,1bh,"u",00;switch to upper screen
lower.screen:defb	2,1bh,"v",00;switch to lower screen

;mode switching strings
grfiks:	defb	2,1bh,'g',00	;enter graphics
no.grfix:defb	2,1bh,'h',00	;exit graphics mode

	



;*** hilton turns the terminal highlight ***
;*** specified by ivon, on; hiltoff off   ***
hilton:	push	hl
	push	de
	push	bc
	ld	a,(char.starting.highlight)
	ld	(ch.starting),a
	ld	a,(char.finishing.highlight)
	ld	(ch.finishing),a
	ld	hl,ivon
	call	msg
	pop	bc
	pop	de
	pop	hl
	ret	

hiltoff:push	hl
	push	de
	push	bc
	ld	a," "
	ld	(ch.starting),a
	ld	(ch.finishing),a
	ld	hl,ivoff
	call	msg
	pop	bc
	pop	de
	pop	hl
	ret	

alton:	push	hl
	push	de
	push	bc
	ld	hl,ivon2
	call	msg
	pop	bc
	pop	de
	pop	hl
	ret	


;---------------------------------------------------------------------------
yxpos:	;sends the character cursor to the location in line Column
	push	hl
	push	de
	push	bc		;save everything
	ld	hl,clead1	;print lead-in
	call	msg
	ld	a,(line)	;get line no.
	ld	b,a
	ld	a,(linoff)
	Add	a,b		;addin line offset
	call	putchar		;out it goes
	ld	a,(Column)	;get column
	ld	c,a
	ld	a,(coloff)	;add in offset
	add	a,c
	call	putchar		;send it out
	pop	bc		;restore the world
	pop	de
	pop	hl
	ret			;and go home



;---------------------------------------
gra.off:;turn into character mode
	push	hl		;save the world
	push	de
	push	bc
	ld	hl,no.grfix	;the no graphics string
	call	msg		;to switch into character mode
	pop	bc		;restore the world
	pop	de
	pop	hl
	ret	

;---------------------------------------	
curon:		;switch on the cursor
	push	hl
	push	de
	push	bc
	ld	hl,on.cursor	;switch cursor on 
	call	msg
	pop	bc
	pop	de
	pop	hl
	ret	

;---------------------------------------
into.graphics:;lets enter graphics mode
	
	push	hl
	push	de
	push	bc
	ld	hl,grfiks	;switch into graphics
	call	msg
	pop	bc
	pop	de
	pop	hl
	ret	

;---------------------------------------	
curoff:	;switch off the cursor
	push	hl
	push	de
	push	bc
	ld	hl,off.cursor	;string to tell the console
	call	msg
	pop	bc
	pop	de
	pop	hl
	ret	

;---------------------------------------
screen.clear:;clear the whole damned screen
	push	hl
	push	de
	push	bc
	ld	hl,clear
	call	msg		;send out clear-screen string
	pop	bc
	pop	de
	pop	hl
	ret	

	page

	subttl  'DIRECT BIOS SUBROUTINES'

;----------------------
;-- BIOS Interaction --
;----------------------

BIOSPB:	ds	8		; Bios parameter block

CONIN:
	call	curon		;switch on the cursor
	LD	DE,CI		;console input
	CALL	dir_bios
	push	af
	call	curoff		;switch it back off
	pop	af
	CP	'A' OR 20H
	RET	C
	CP	('Z' OR 20H)+1
	RET	NC
	AND	5FH		;small alph -> large alph
	RET
;
conout:
	ld	de,co
	jr	dir_bios

list:
	ld	de,li
	jr	dir_bios
;
;
dir_bios:
	LD	hl,(bios)	;entry BIOS
	ADD	hl,DE
	JP	(hl)		; direct BIOS call




;------------------------
;-- BDOS Character I/O --
;------------------------

subttl  'BDOS CHARACTER SUBROUTINES'

;-----;
listout:
;-----;
	ld	a,(hl)
	or	a
	ret	z
;
;
	push	hl
	ld	c,a
	call	list
	pop	hl
	inc	hl
	jr	listout

;-----;
strout:
;-----;
	ld	a,(hl)
	or	a
	ret	z
;
;
	push	hl
	call	putchar
	pop	hl
	inc	hl
	jr	strout

;------;
putchar:
;------;
	ld	c,a
	call	conout		;conout
	ret


;-------;
Msg:
;-------;
	
	ld	a,(hl)		;print string preceded by a count byte
	ld	b,a		;get count byte
	or	a		;is it a null string
	ret	z		;if null string, then go home
..loop:	inc	hl		;point to next ascii byte
	ld	a,(hl)		;get it
	push	hl
	push	bc
	call	putchar		;send it to the console
	pop	bc
	pop	hl
	dec	b		;any more to do
	ret	z		;if not go home
	jr	..loop		;otherwise do the next byte

;-------;
Pr.Msg:
;-------;
	
	ld	a,(hl)		;print string preceded by a count byte
	ld	b,a		;get count byte
	or	a		;is it a null string
	ret	z		;if null string, then go home
..loop14:
	inc	hl		;point to next ascii byte
	ld	a,(hl)		;get it
	push	hl
	push	bc
	ld	c,a
	call	list		;send it to the list device
	pop	bc
	pop	hl
	dec	b		;any more to do
	ret	z		;if not go home
	jr	..loop14	;otherwise do the next byte



prompt:	push	hl
	push	de
	push	bc
	ex	de,hl
	call	strout
waitkb:	ld	c,6		; BDOS Direct Console i/o
	ld	e,0ffh		; input
	call	bdos
	or	a
	jr	z,waitkb	; wait for character to be entered
	pop	bc
	pop	de
	pop	hl
	ret


bell:	push	hl
	push	de
	push	bc
	push	af
	ld	e,07h		; BELL
	ld	c,6		; BDOS Direct Console output
	call	bdos
	pop	af
	pop	bc
	pop	de
	pop	hl
	ret

getchar:
	ld	c,1		;conin
	call	bdos
	cp	'a'
	ret	c
	cp	'z'+1
	ret	nc
	and	5fh		; remove case bits
	ret

;--------------------------------------------------
yesorno:;returns 0 in a if no, 0ffh if yes
	call	curon		;switch on the cursor
	call	conin		;and get the users fumbling response
	push	af		;remember the response
	call	curoff		;and switch off the cursor
	pop	af		;what did the poor slob say
	cp	'Y'		;was it a y?
	jp	z,..yes		;yup
	cp	'N'		;was it a big n
	jp	z,..no		;he said no
	cp	0dh		;a carriage return
	jp	z,..no		;if so then it was a no
	cp	0ah		;ditto line feed
	jp	z,..no
	jp	yesorno		;the silly boy pressed the wrong button
..no:	ld	hl,no.thank.you	;polite
	call	strout
	xor	a		;signal a no
	ret	
..yes:	ld	hl,yes.please	;polite
	call	strout
	xor	a		;signal a yes
	dec	a
	scf			;might as well
	ret	


;-------------------------
;-- String message area --
;-------------------------

prompt.string:		;at the top of the page

	db	esc,"=",1+32,17+32
	DB	'QX+ Dot Matrix printer utility   ver '
	db	vers/10+'0','.',vers mod 10+'0'
 
	db	esc,"=",2+32,15+32
	db	'Use the cursor control keys to make your choices.'
 	db	esc,"=",3+32,15+32
	db	'The space bar cycles between choices.   Press CR'
	db	esc,"=",4+32,15+32
	db	'when finished. BREAK aborts.'
	db	000


Choice.prompt:

	db	esc,"=",6+32,15+32
	db	'      Choose the printer mode that you require      '
	db	00

font.choice.prompt:

	db	esc,"=",6+32,15+32
	db	'      Choose the font style that you require        '
	db	00


Wipe.choice.prompt:

	db	esc,"=",6+32,15+32
	db	'                                            '
	db	00

Another.prompt:
	db	esc,"=",6+32,15+32
	db	'Do you wish to make another selection (Y/N)-> '
	db	00

no.thank.you:
	db	' No thank you'
	db	00
Yes.Please:
	db	' Yes         '
	db	00

done.msg:	db	cr,lf,lf,'-- The printer has been set'
	db	cr,lf,00

abortmsg:
	db	cr,lf,lf,'** Program terminated ** no action taken.'
	db	cr,lf,000
	


instruct:
	db	cr,lf
db	'		This utility enables you to set the method whereby the'
	db	cr,lf
db	'	BIOS interprets what you send to an EPSON Dot Matrix  printer.'
	db	cr,lf
db	'	It  allows you to set the EPSON printer to print Multifont  or'
	db	cr,lf
db	'	redefinable characters. It also allows you to set whether  the'
	db	cr,lf
db	'	printer  is  MX, FX, LQ, JX, or SQ series. The later  printers'
	db	cr,lf
db	'	perform  much  faster when printing multifont  or  redefinable'
	db	cr,lf
db	'	characters  than the older MX series. If in doubt, consult the'
	db	cr,lf
db	'	chapter  in  the QX+ manual on the LIST device, or  experiment'
	db	cr,lf
db	'	with the test patterns within this program. It is possible  to'
	db	cr,lf
db	'	set a mode by typing PRINTER, followed by its number, from the'
	db	cr,lf
db	'	CP/M prompt (eg    PRINTER 4 )'
	db	cr,lf,000,000


hello.string:
	defb	..end - $	;length of the string
	defb	1bh,",","g",5,"c";define split screen
	defb	1bh,"u"		;go to the upper
	defb	1bh,"/"		;make multifont
	defb	1bh,"#",6	;style 4
	defb	'   QX+ Printer Font setting Utility'
	defb	1bh,"v"		;enter the lower screen
	defb	1BH,"+"		;blank the screen
..end:	defb	000,000

ok:	defb	..end1 - $
	db	ESC,'=',(18+' '),(26+' ')	;bottom centre
	defb	1bh,'('		;full intensity
	defb	1bh,"^"		;blink
	defb	"<Press any key to continue>"
	defb	1bh,"q"		;cancel blink
	defb	1bh,')'		;half intensity
..end1:	defb	00,00

tidy.up:;set the screen to rights
	defb	..end2 - $
	defb	1bh,"+"
	defb	1bh,"u",1bh,"\"
	defb	1bh,"v",1bh,"u"	;dont ask
	defb	1bh,",","C",26,"C"
	defb	1bh,"+"
..end2:	defb	000,000



;-----------------------
;---    Utilities    ---
;-----------------------


;----------------------------------------------------------------------------
addhl:	;adds a to hl and leaves the result in hl
	add	a,l
	ld	l,a
	ret	nc
	inc	h
	ret	


;----------------------------------------------------------------------------
drawdown:;the whole screen a double line
	ld	b,23		;the number of lines
..downloop:
	push	bc
	ld	hl,line	;get where we are
	inc	(hl)		;increment it
	call	yxpos		;and point the cursor there
	ld	a,086h		;down line
	call	putchar		;output the byte
	pop	bc
	djnz	..downloop	;and do another until b=0
	ret			;the job is all done
;----------------------------------------------------------------------------
nice.box:;around the screen
	xor	a
	ld	(line),a	;zap the line position
	ld	(Column),a	;and the column position
	call	yxpos		;home the cursor
;draw the top border	
	ld	a,087h		;a top left border
	call	putchar		;send a top-left bracket
	ld	b,77
..toploop:;now do the top line across
	ld	a,085h		;do a top line
	push	bc
	call	putchar		;out goes a line character
	pop	bc
	djnz	..toploop
	ld	a,088h		;a top right border
	call	putchar		;do a top right character
;go to bottom line	
	ld	a,24		;now do likewise for the bottom
	ld	(line),a
	xor	a
	ld	(Column),a	;go to the bottom left
	call	yxpos
;draw the bottom border	
	ld	a,089h		;a bottom left border
	call	putchar
	ld	b,77		;and now a nice horizontal line
..botloop:
	ld	a,085h		;do a bottom line
	push	bc
	call	putchar
	pop	bc
	djnz	..botloop
	ld	a,08ah		;a bottom right border
	call	putchar
	xor	a
	ld	(Column),a
	ld	(line),a	;home again
	call	drawdown
	ld	a, 78		;we have drawn a vertical line
	ld	(Column),a
	xor	a		;go to the top right
	ld	(line),a
	call	drawdown	;and do the second vertical line
	
	ret	




;*** findst points hl to the count ***
;*** byte of the string array      ***
;*** element specified in c.       ***
	
findst:	
	inc	c
..loop5:	dec	c
	ret	z
	push	bc
	ld	b,0
	ld	c,(hl)
	add	hl,bc
	inc	hl
	inc	hl
	pop	bc
	jp	..loop5

printst:	;prints out the Cth element in the string array
	call	findst
	call	pr.msg
	ret


;*** typest types the bc'th string ***
;*** in the array addressed by hl  ***
typest:	call	findst
	call	msg
	ret	

;----------------------------------------------------
matchst:	;find out if string pointed to
;by HL matches the one pointed to by DE
;takes account of abbreviations
	xor	a
	ld	b,(hl)
	cp	b
	ret	z
	ex	de,hl
	ld	c,(hl)
	cp	c
	ret	z
	ex	de,hl
;check for null strings
..back1:
	inc	hl
	inc	de
	ld	a,(de)
	xor	(hl)
	and	0dfh
	jr	nz,..bad
	dec	c
	jr	z,..good
	djnz	..back1
..good:
	xor	a
	dec	a
	ret
..bad:
	xor	a
	ret
			



;----------------------------------------------------
in.list::	;finds out if the string addressed
;by DE is in the string array in HL.
;non-zero if a match, C points to element no.
;HL points to the element

	ld	a,(hl)
	and	a		;examine length
	ret	z		;null string array
;so no match for string
	ld	b,a
	inc	hl
	xor	a
	ld	c,a		;B has number to do
..loop9:
	push	bc	;C has number done
	push	hl
	call	findst
;HL points to the count byte of the string
;DE points to the count byte of the match
	push	de
	call	matchst
	pop	de
	pop	hl
	pop	bc
	and	a
	ret	nz			;return non-zero if match
;element no. in C
	inc	c
	djnz	..loop9
	xor	a
	ret			;failure to match





;*** typelist types, in the form    ***
;*** of a vertical list, an array   ***
;*** pointed to by str.array.	    ***
;*** top of list at screen position ***
;*** dictated by \ine and column    ***
;*** zero set if last list passed   ***
typelist:

;start by finding out where we start to type the list
	ld	a,(line)
	ld	(startline),a
	ld	a,(column)
	ld	(margin),a
;Str.array points to the start of the string array
	ld	hl,(str.array)
	ld	a,(hl)
	and	a		;examine length
	ret	z		;null string array

	ld	b,a
	inc	hl
	xor	a
	ld	c,a
..loop6:	push	bc
	push	hl
	ld	a,(margin)
	and	a
	jp	z,..over
	dec	a
..over:	ld	(column),a
	call	yxpos
	ld	a,(highlt)
	cp	c
	push	af
	call	z,hilton
	ld	a,(ch.starting)
	push	bc	
	push	hl
	call	putchar
	pop	hl
	pop	bc
	call	typest
	ld	a,(ch.finishing)
	call	putchar
	pop	af
	call	z,hiltoff
	pop	hl
	pop	bc
	ld	a,(line)
	inc	a
	ld	(line),a
	inc	c
	dec	b
	jp	nz,..loop6
	ld	a,(margin)
	ld	(column),a
	ld	a,(startline)
	ld	(line),a
	call	yxpos
	ret	nz
	inc	a
	ret	

	
choose.it:	;make a selection from the available choices
;using the string array pointed to by str.array. Returns non
;zero if successful and character pressed in A reg.

	call	typelist
	ret	z
	call	getchar
	cp	03h
	jp	z,aborted
	cp	up.arrow
	jp	z,..up
	cp	down.arrow
	jp	z,..down
	cp	right.arrow
	jp	z,..exit
	cp	left.arrow
	jp	z,..exit
	cp	0dh
	jp	z,..exit
	jp	..updn
..exit:	and	a	;set flags
	ret	
..down:	ld	a,false
	ld	(flip.flop),a
	ld	hl,(str.array)
	ld	b,(hl)
	dec	b
	ld	a,(highlt)
	cp	b
	jp	z,choose.it
	inc	a
	ld	(highlt),a
	ld	a,true
	ld	(flip.flop),a
	jp	choose.it
..up:	ld	a,true
	ld	(flip.flop),a
	ld	a,(highlt)
	and	a
	jp	z,choose.it
	dec	a
	ld	(highlt),a
	ld	a,false
	ld	(flip.flop),a
	jp	choose.it
	
..updn:	ld	a,(flip.flop)
	and	a
	jp	z,..up
	jp	..down


;---------------------------------------------------------------------------;


	subttl  'p r i n t     main'
	page



start:
	ld	c,12		; BDOS return version number
	call	bdos
	cp	031h		; Check that the right version of CP/M
	jp	nz,notcpm3
	ld	a,h
	or	a
	jp	nz,notcpm3
;now we set the stack
	ld	hl,(0006h)
	ld	sp,hl		; use top of memory as stack
;check for QX+
	ld	c,50		; BDOS Direct BIOS calls
	ld	de,BIOSPB
	ld	a,30		; Customised BIOS entry point
	ld	(de),a		; requires no other registers
	call	BDOS		; Check that the right machine 
	cp	'A'		; Epson BIOS returned version
	jp	z,onwards.confidently
;-----------------------------------------;
; Program not loaded under CP/M3 on Epson ;
;-----------------------------------------;
notcpm3:
	ld	hl,cpm3msg
	call	strout

	ld	c,0
	jp	bdos		; and terminate program

cpm3msg:
	db	'PRINTER FONT SETTER - Requires CP/M + on Epson QX-10',cr,lf,0


onwards.confidently:
;first we check to see if it was a batch mode job
	ld	hl,dfcb+1
	ld	a,(HL)
	cp	' '
	jr	z,interactive
	ld	de,dbuf
;strip off leading blanks
	ld	a,(de)		;get the count
	ld	c,a
strip.em:
	inc	de
	ld	a,(DE)
	cp	" "
	dec	de
	jr	nz,no.leading
	inc	de
	dec	c
	ld	a,c
	ld	(DE),a
	jr	nz,strip.em
no.leading:	
	ld	hl,choice.table
	call	in.list
	jp	z,interactive	;a boner
	push	bc
	ld	a,c
	cp	9
	jp	nc,interactive
	ld	hl,choice.strings
	inc	hl
	call	printst
	pop	bc
	ld	hl,choice.table
	inc	hl
	call	typest		;type what he choz
	jp	finish	

interactive:	
;now we do the fancy screen stuff
	ld	hl,hello.string
	call	msg		;split the screen and print title
	ld	hl,instruct
	call	strout		;print the instructions
	ld	hl,OK
	call	msg
 	call	getchar		;and throw it away
	push	af
	ld	hl,tidy.up
	call	msg
	pop	af
	cp	03h		;was it control c?
	jp	z,aborted
	call	curoff		;switch off the cursor
	call	nice.box	;round the screen
	ld	hl,prompt.string
	call	strout
once.more::
	ld	hl,choice.prompt
	call	strout
	ld	a,9
	ld	(line),a
	ld	a,15
	ld	(column),a
	ld	hl,choice.table
	ld	(str.array),hl

	xor	a
	ld	(highlt),a
	call	choose.it
	cp	3		;was it a control C
	Jp	z,Im.Done
	ld	a,(highlt)
	ld	(selection),a
	push	af
	ld	hl,wipe.choice.prompt
	call	strout
	pop	af
	cp	11	;is it a complicated one?
	jp	nc,complicated
	ld	c,a
	ld	hl,choice.strings
	inc	hl
	call	printst
backwards::
	ld	hl,another.prompt
	call	strout
	call	yesorno
	jp	nz,once.more
;otherwise fall through

Im.Done:
	call	screen.clear
	call	curon
	ld	hl,done.msg
	call	strout
	jp	finish	

aborted:
	call	screen.clear
	call	curon
	ld	hl,abortmsg
	call	strout
;and fall through
;-----;
finish:
	ld	c,0		; BDOS system reset
	jp	bdos


;----------------------------------------------------------------------------
complicated:	
	cp	12		;was it a request to print test pattern?
	jp	z,test.pattern
	call	screen.clear
	call	curoff
	ld	hl,prompt.string
	call	strout
	call	nice.box	;round the screen
	ld	hl,font.choice.prompt
	call	strout
	ld	a,8
	ld	(line),a
	ld	a,30
	ld	(column),a
	ld	hl,font.choice.table
	ld	(str.array),hl

	xor	a
	ld	(highlt),a
	call	choose.it
	ld	a,(highlt)
	ld	(selection),a
	ld	hl,wipe.choice.prompt
	call	strout
	ld	hl,font.style.preamble
	call	pr.msg
	ld	a,(selection)
	ld	c,a
	call	list
	call	screen.clear
	call	curoff
	call	nice.box	;round the screen
	jp	backwards


;----------------------------------------------------------------------------
test.pattern:
	ld	hl,test.string
	call	listout
	jp	backwards

test.string:
	db	cr,lf
	db	cr,lf
	db	'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
	db	cr,lf
	db	'abcdefghijklmnopqrstuvwxyz'
	db	cr,lf
	db	'@#$%^|&`~()<>[]{}-+=*/\,.?;:"',27H
	db	cr,lf
	db	'0123456789'
	db	cr,lf
	db	cr,lf

	db	00


;----------------------------------------------------------------------------
choice.table:	;string array of possible printer delights

	db	13	;strings follow
 
	db	45,'1  Proportionally spaced multifont characters',00
	db	40,'2  Non-Proportional multifont characters',00
	db	41,'3  Redefinable characters, screen spacing',00
	db	46,'4  Redefinable characters, normal line spacing',00
	db	44,'5  Proportional multifonts in screen spacing',00
	db	47,'6  Non-proportional multifonts (screen spacing)',00
	db	28,'7  Normal printer characters',00
	db	46,'8  Set MX series EPSON printer (or equivalent)',00
	db	30,'9  Set FX series EPSON printer',00
	db	30,'10 Set JX series EPSON printer',00
	db	30,'11 Set LQ series EPSON printer',00
	db	38,'12 Set MultiFont Style for the printer',00
	db	42,'13 Print out a test pattern on the printer',00




;	"A"	 -	switch to proportional spacing
;	"B"	 -	switch to unproportional spacing
;	"C"	 -	do the test sequence
;	"D"	 -	switch to graphic characters
;	"E"	 -	switch from graphic.chars
;	"F"	 -	switch to screen eqivalence
;	"G"	 -	switch from screen equivalence to normal spacing
;	"/"	 -	Switch to multifont characters
;	"\"	 -	Switch from multifont characters
;	"#"	 -	Select Multifont style
;	"$"	 -	set printer type


font.style.preamble:
	3,esc,esc,'#',00	

choice.strings:
	db	011	;strings follow

	db	9,ESC,ESC,'/',esc,esc,'A',esc,esc,'G',00
	db	9,esc,esc,'/',esc,esc,'B',esc,esc,'G',00
	db	9,esc,esc,'\',esc,esc,'D',esc,esc,'F',00
	db	9,esc,esc,'\',esc,esc,'D',esc,esc,'G',00
	db	9,esc,esc,'/',esc,esc,'A',esc,esc,'F',00
	db	9,esc,esc,'/',esc,esc,'B',esc,esc,'F',00
	db	6,esc,esc,'\',esc,esc,'E',00
	db	4,esc,esc,'$',0,00
	db	4,esc,esc,'$',1,00
	db	4,esc,esc,'$',2,00
	db	4,esc,esc,'$',3,00
	db	000,000,000,000	;bufferstops

font.choice.table:
	db	16	;entries follow

	db	10,'OCR B-Font',00
	db	06,'Bodoni',00
	db	11,'Old English',00
	db	10,'Flash Bold',00
	db	17,'Commercial Script',00
	db	15,'Helvetica light',00
	db	22,'Helvetica light italic',00
	db	23,'Helvetica Medium italic',00
	db	08,'Broadway',00
	db	26,'American Typewriter Medium',00
	db	12,'Light italic',00
	db	16,'Helvetica Medium',00
	db	13,'Bodoni Italic',00
	db	17,'Sans Serif Shadad',00
	db	19,'Micrograma Extended',00
	db	11,'Old Germany',00




	end start

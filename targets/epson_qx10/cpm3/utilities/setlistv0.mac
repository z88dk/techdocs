	page 45
	title 'MML: utility SETLIST'
;
;	MML: utility SETLIST to set up LIST parameters on file LIST.COM
;	25 aug 1981
;	Version: DSC4 using CP/M 2.2
;		 Using MICROPLAN-MML bios version 9/81
;
; Amendments
; ----------
; 25aug81	Printer parameters held in data block starting 0104h
; 15 sept 81	No change for change from bios 5 to bios 9
;
CIN	EQU	1	; BDOS I/O for READ from CONSOLE
COUT	EQU	2	; BDOS I/O for WRITE to CONSOLE
CMSG    EQU     9       ; BDOS I/O to write string to CONSOLE
LOUT	EQU	5	; BDOS I/O for WRITE to LIST DEVICE
CSTAT	EQU	11	; BDOS test for character ready
;
	ORG	100H	;PROGRAM TO READ FILE AND PRINT ON LIST DEVICE
	JMP     PRINT
; Printer parameters (may be changed)
WIDTH	DB	132	; WIDTH of page = 132 characters
PAGELN  DB     51      ; Length of page is default 51, print 47 lines
MISS	DB	4	; No of lines skipped at bottom of page
NUMBER	DB	not 0	; Set to zero to suppress line numbers
FORMFEED	DB	not 0	; Set to zero if printer does not support form feed;
CRWT:   DB     'COPYWRITE D. POWYS-LYBBE MML 25th AUGUST 1981'
;
FFCC	EQU	0CH	; Form Feed control character
LFCC	EQU	0AH	; Line Feed control character
CRCC	EQU	0DH	; Carriage Return control character
BELL	equ	07H	; BELL
;
PRINT:
	LXI	H,0
	DAD	SP
	SHLD	OLDSP	;SAVE CALLER'S STACK POINTER
START:	LXI	SP,OLDSP	;SET UP OURS
;
	lxi	d,msg1
	mvi	c,cmsg
	call	bdos
;
;	Read in LIST.COM file
;
	SUB	a
	sta	fcb$list$cr
	sta	fcb$list$ex
	LXI	D,FCB$LIST
	MVI	C,15
	CALL	BDOS	;OPEN FILE
	CPI	0ffh
	JNZ	FRST$REC
	LXI	D,NOTFOUND
	MVI	C,9
	CALL	BDOS
	JMP	RETURN	;FILE NOT FOUND
msg1:	db	'MML:SETLIST initialise LIST printer paramters',crcc,lfcc,'$'
FCB$LIST:
	DB	0
	DB	'LIST    ','COM'
FCB$LIST$EX:	DB	0,0,0,0
	DS	16
FCB$LIST$CR:	DB	0
FCB$LIST$R:	DB	0,0,0
DMA$LIST	DS	128
;
FRST$REC:		;READ NEXT BUFFER FROM DISK
	LXI	D,DMA$LIST
	MVI	C,26
	CALL	BDOS	;SET DMA ADDRESS
	LXI	D,FCB$LIST
	MVI	C,20
	CALL	BDOS	;READ RECORD
	LXI	H,DMA$LIST	;GET BUFFER ADDRESS
	inx	h
	inx	h
	inx	h
	mov	a,m
	sta	WIDTH
	inx	h
	mov	a,m
	sta	PAGELN
	inx	h
	mov	a,m
	sta	MISS
	inx	h
	mov	a,m
	sta	NUMBER
	inx	h
	mov	a,m
	sta	FORMFEED
;
;
	lxi	h,msg2a
	lxi	d,msg2
	mvi	c,3
	lda	width
	call	setup
	call	binary
	sta	width
;
	lxi	h,msg3a
	lxi	d,msg3
	mvi	c,3
	lda	pageln
	call	setup
	call	binary
	sta	pageln
;
;
	lxi	h,msg4a
	lxi	d,msg4
	mvi	c,2
	lda	miss
	call	setup
	call	binary
	sta	miss
;
;
	lxi	h,msg5a
	lxi	d,msg5
	mvi	c,1
	lda	number
	ani	1
	call	setup
	call	binary
	ani	1
	sta	number
;
;
	lxi	h,msg6a
	lxi	d,msg6
	mvi	c,1
	lda	FORMFEED
	ani	1
	call	setup
	call	binary
	ani	1
	sta	FORMFEED
;
	jmp	update
;
setup:
	push	psw
	call	show
	push	h
	push	b
	push	d
;
	mvi	d,0
	mov	e,c
	dad	d
	dcx	h	;(hl) -> lsd of ascii digits
	mov	b,c	; save count
	inr	c
;
setup1:
	push	h
	push	b
	mvi	c,cin
	call	bdos
	pop	b
	pop	h
	cpi	crcc
	jz	setup4
	cpi	'0'
	jc	seterr
	cpi	'9'+1
	jnc	seterr
	dcr	c
	jz	seterr
	push	h
	push	b
	mov	d,m
setup2:	dcr	b	; Shift each digit to right
	jz	setup3
	dcx	h
	mov	e,m
	mov	m,d
	mov	d,e
	jmp	setup2
setup3:	pop	b
	pop	h
	mov	m,a
	jmp	setup1
setup4:
	mov	a,c
	pop	d
	pop	b
	mov	b,c	; use b to count past digits
	dcr	a
	cmp	b
	jz	setup7	; Unchanged
setup5:	cmp	b
	jz	setup6
	dcr	b
	jz	setup7
	dcx	h
	jmp	setup5
setup6:	mvi	m,' '
	dcx	h
	dcr	b
	jnz	setup6
setup7:	pop	h
	pop	psw
	ret
show:
	push	h
	push	b
	push	d
	call	ascii
	pop	d
	push	d
	mvi	c,cmsg
	call	bdos
	pop	d
	pop	b
	pop	h
	ret
seterr:
	lxi	d,msgerr
	mvi	c,cmsg
	call	bdos
	pop	d
	pop	b
	pop	h
	pop	psw
	jmp	setup
msgerr:	db	bell,'$'
;
msg2:	db crcc,lfcc,'Printer width ('
msg2a	db	'   )','$'
msg3:	db crcc,lfcc,'Lines per page ('
msg3a	db	'   )','$'
msg4:	db crcc,lfcc,'Lines skipped ('
msg4a	db	'  )','$'
msg5:	db crcc,lfcc,'Suppress lines <0-Y, 1-N> ('
msg5a	db	' )','$'
msg6:	db crcc,lfcc,'Suppress form feed <0-Y, 1-N> ('
msg6a	db	' )','$'
;-----
;UPDATE
;
update:
;
;	Check if o.k. to update
;
;
	lxi	h,msg2a
	lxi	d,msg2
	mvi	c,3
	lda	width
	call	show
;
	lxi	h,msg3a
	lxi	d,msg3
	mvi	c,3
	lda	pageln
	call	show
;
;
	lxi	h,msg4a
	lxi	d,msg4
	mvi	c,2
	lda	miss
	call	show
;
;
	lxi	h,msg5a
	lxi	d,msg5
	mvi	c,1
	lda	number
	ani	1
	call	show
;
;
	lxi	h,msg6a
	lxi	d,msg6
	mvi	c,1
	lda	FORMFEED
	ani	1
	call	show
;
	lxi	d,msgok
	mvi	c,cmsg
	call	bdos
	mvi	c,cin
	call	bdos
	cpi	'Y'
	jz	wr$rec
	cpi	'y'
	jz	wr$rec
	cpi	'N'
	jz	return
	cpi	'n'
	jz	return
	lxi	d,msgerr
	mvi	c,cmsg
	call	bdos
	jmp	update
msgok:	db	crcc,lfcc,'OK to update LIST.COM (Y/N)?','$'
;
wr$rec:			; write first record back to disc
	LXI	H,DMA$LIST	;GET BUFFER ADDRESS
	inx	h
	inx	h
	inx	h
	lda	WIDTH
	mov	m,a
	inx	h
	lda	PAGELN
	mov	m,a
	inx	h
	lda	MISS
	mov	m,a
	inx	h
	lda	NUMBER
	mov	m,a
	inx	h
	lda	FORMFEED
	mov	m,a
;
	SUB	a
	sta	fcb$list$cr
	sta	fcb$list$ex
	sta	fcb$list$r
	sta	fcb$list$r+1
	sta	fcb$list$r+2
;
	LXI	D,DMA$LIST
	MVI	C,26
	CALL	BDOS	;SET DMA ADDRESS
	LXI	D,FCB$LIST
	MVI	C,34
	CALL	BDOS	;WRITE RANDOM
;
	lxi	d,fcb$list
	mvi	c,16	; CLOSE file
	call	bdos
	jmp	return
;-----
; ASCII
; REG IN:	a - 8 bit unsigned binary number
;		c - number of ascii digits
;		(hl) -> address of ascii text
; Subroutine asc03 is re-entrant
;
ascii:
	mov	b,a
	mov	a,c
asc01:	dcr	a
	jz	asc02
	mvi	m,' '
	inx	h
	jmp	asc01
asc02:	mvi	m,'0'
	inr	b
asc08:	dcr	b
	rz	; Finished count down
	call	asc03
	jmp	asc08
; re-entrant routine to increment ascii character
asc03:	inr	m
	mov	a,m
	cpi	'9'+1
	rc
	mvi	m,'0'
	dcr	c
	jz	asc04	; overflow ......
	dcx	h
	mvi	a,'0'
	cmp	m
	jc	asc09
	mov	m,a
asc09:	call	asc03
	inx	h
asc04:	inr	c
	ret
;
;------
;BINARY
; Reg in	(HL) -> address of ascii text
;		c    -  Number of ascii digits
; Reg out	a    -  Binary value
; Error         aborts to start of program
;
BINARY:	push	h
	push	b
	inr	c
	sub	a
bin01:	dcr	c
	jz	bin09
	mov	b,a	; multiply a by ten
	rlc
	rlc
	add	b
	rlc
	mov	b,a
	mov	a,m
	cpi	' '
	jz	bin03
	sbi	'0'
	jc	bin04
	cpi	10
	jnc	bin04
	add	b
bin02:	inx	h
	jmp	bin01
bin03:	mov	a,b
	jmp	bin02
bin04:	lxi	d,binerr	; error in text
	mvi	c,cmsg
	call	bdos
	jmp	start		; and crash to start
bin09:	pop	b
	pop	h
	ret
binerr:	db	crcc,lfcc,'ASCII to BINARY ERROR','$'
;
RETURN:			;NORMAL RETURN
	LHLD	OLDSP	;GIVE BACK CALLER'S STACK
	SPHL
	RET
;
FCB	EQU	5CH
DMA	EQU	80H
BDOS	EQU	5
	DS	128
OLDSP:	DW	0
NOTFOUND:	DB	'FILE NOT FOUND',CRCC,LFCC,'$'
;
	END
	pop	psw

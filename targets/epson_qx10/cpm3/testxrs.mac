	.z80
	title	EPSON QX-10 CPM3 BIOS Test X-RS232 serial i/o

	name	('testxrs')

;------------------------------------------------------------------
; Customised CP/M 3 BIOS for EPSON QX-10
;
; Copyright 1982 D. Powys-Lybbe (Excludes D.R. Inc sample BIOS)
; Author: D. Powys-Lybbe, MML Systems Ltd., London
; Date: 7th June 1983
;
;------------------------------------------------------------------
; Revisions
; =========
; ALPHA Aug 8,83
; BETA  Dec 5,83
; BETA+ Jan 5,84
;       Feb 20,84 Serial clock corrected
;
; Note:
; =====
; To avoid conflict with GENCPM, the resident entry points
; must not be public.
;------------------------------------------------------------------

	cseg		;GENCPM puts CSEG code in resident common memory

;====================================================
; user defined serial/parallel character I/O routines
;====================================================

;Character device initialisation (Cold Boot)	

	public	initx1sio		; initialise 1st optional SIO board
	public	initx2sio		; initialise 2nd optional SIO board

; 1st Option Serial SIO-A & SIO-B

	public	ser2in,ser2out		; Option Serial-A I/O char i/o
	public	ser2sin,ser2sot
	public	ser2baud,ser2set
	public	ser3in,ser3out		; Option Serial-B I/O char i/o
	public	ser3sin,ser3sot
	public	ser3baud,ser3set
	public	x1serinit		; initialise optional ser i/o
	public	@sio1a			; table of SIO parameters
	public	@sio1b			; table of SIO parameters

; 2nd Option Serial SIO-A & SIO-B

	public	ser4in,ser4out		; Option Serial-A I/O char i/o
	public	ser4sin,ser4sot
	public	ser4set
 	public	ser5in,ser5out		; Option Serial I/O char i/o
 	public	ser5sin,ser5sot
	public	ser5set
	public	x2serinit		; initialise optional ser i/o
	public	@sio2a			; table of SIO parameters
	public	@sio2b			; table of SIO parameters

;-------------------------------------------------------------
; PUBLIC SYMBOLS IN EPSON QX-10 CPM3 BIOS
;-------------------------------------------------------------

;------------------------------------------------------------------

;------------------------------------------------------------------
;
;	Various equates
;
;------------------------------------------------------------------

	maclib	CBIOS.EQU	; QX-10 hardware ports and equates

	maclib	8253.EQU	; CTC hardware ports and equates
xclk$f	equ	6000		; frequency 1536000 = 6000 * 256 hertz

	maclib	7201.EQU	; SIO ports

;-----------------------------------------------------------------
;Epson interrupt vectors

;EPSON CP/M: inttab	equ	0fd80h	; base of interrupt vector
inttab	equ	0fe00h		; base of interrupt vector
intpwr	equ	inttab+0	; power down
intstm	equ	inttab+4	; soft timer
intx1	equ	inttab+8	; ext int 1
intx2	equ	inttab+12	; ext int 2
int201	equ	inttab+16	; 7201 interrupt
int220	equ	inttab+20	; 7220 interrupt
intfdc	equ	inttab+24	; 765 fdc interrupt

int255	equ	inttab+32	; 8255 interrupt
intx3	equ	inttab+36	; ext int 3
int818	equ	inttab+40	; 46818 interrupt
intx4	equ	inttab+44	; ext int 4
intx5	equ	inttab+48	; ext int 5
inttm2	equ	inttab+52	; soft timer 2
intx6	equ	inttab+56	; ext int 6
intx7	equ	inttab+60	; ext int 7
inttop	equ	inttab+64	; top of interrupt jumps


	page

	cseg

sioerr:			; read error <C> -> status port
	push	af		; save input character
	ld	a,00110000b	; Error reset
	out	(c),a
	call	intbell		; error so ring bell
	pop	af
	ret

intbell:			; RING bell
	xor	a
	out	(clk$b),a	; set timer constant to 1000h
	ld	a,16
	out	(clk$b),a

	in	a,(getbnk)
	and	not 1111b	; remove FDD bits
	or	1		; this will ring bell
	out	(setbnk),a	; (and re-select current bank)

	ret

	page

;			=======================
;			Option RS-232C I/F card
;			=======================

;=======================
;1st Option Serial SIO-A
;=======================

;----------------------------------------------------
ser2sin:	; Option Serial I/O char input status
;----------------------------------------------------
	ld	a,(fifst2a)	; 0= not ready, -1 = ready
	ret

;---------------------------------------------
ser2in:		; Option Serial I/O char input
;---------------------------------------------
	ld	a,fif2al	; length of buffer -1
	ld	hl,fif2ar
	jp	exfifo

;-----------------------------------------------------
ser2sot:	; Option Serial I/O char output status
;-----------------------------------------------------
	ld	c,x1sio$as	; Channel A status
	jr	sersot

;----------------------------------------------
ser2out:	; Option Serial I/O char output
;----------------------------------------------
	ld	c,x1sio$ad	; Channel A data
	jr	serout		; XMIT character

;=======================
;1st Option Serial SIO-B
;=======================

;----------------------------------------------------
ser3sin:	; Option Serial I/O char input status
;----------------------------------------------------
	ld	a,(fifst2b)	; 0= not ready, -1 = ready
	ret

;---------------------------------------------
ser3in:		; Option Serial I/O char input
;---------------------------------------------
	ld	a,fif2bl	; length of buffer -1
	ld	hl,fif2br
	jp	exfifo

;-----------------------------------------------------
ser3sot:	; Option Serial I/O char output status
;-----------------------------------------------------
	ld	c,x1sio$bs	; Channel B status
	jr	sersot

;----------------------------------------------
ser3out:	; Option Serial I/O char output
;----------------------------------------------
	ld	c,x1sio$bd	; Channel B data
	jr	serout		; XMIT character

;=======================
;2nd Option Serial SIO-A
;=======================

;----------------------------------------------------
ser4sin:	; Option Serial I/O char input status
;----------------------------------------------------
	ld	a,(fifst3a)	; 0= not ready, -1 = ready
	ret

;---------------------------------------------
ser4in:		; Option Serial I/O char input
;---------------------------------------------
	ld	a,fif3al	; length of buffer -1
	ld	hl,fif3ar
	jp	exfifo

;-----------------------------------------------------
ser4sot:	; Option Serial I/O char output status
;-----------------------------------------------------
	ld	c,x2sio$as	; Channel A status
	jr	sersot

;----------------------------------------------
ser4out:	; Option Serial I/O char output
;----------------------------------------------
	ld	c,x2sio$ad	; Channel A data
	jr	serout		; XMIT character

;=======================
;2nd Option Serial SIO-B
;=======================

;----------------------------------------------------
ser5sin:	; Option Serial I/O char input status
;----------------------------------------------------
	ld	a,(fifst3b)	; 0= not ready, -1 = ready
	ret

;---------------------------------------------
ser5in:		; Option Serial I/O char input
;---------------------------------------------
	ld	a,fif3bl	; length of buffer -1
	ld	hl,fif3br
	jp	exfifo

;-----------------------------------------------------
ser5sot:	; Option Serial I/O char output status
;-----------------------------------------------------
	ld	c,x2sio$bs	; Channel B status
	jr	sersot

;----------------------------------------------
ser5out:	; Option Serial I/O char output
;----------------------------------------------
	ld	c,x2sio$bd	; Channel B data
	jr	serout		; XMIT character

	page


;			=======================
;			Option RS-232C I/F card
;			=======================

;--------------------------------------------------;
; 1st Optional serial port addresss - address 0a?h ;
;--------------------------------------------------;

x1sio$ad	equ	0a4h	; SIO rs232 data (port A)
x1sio$as	equ	0a5h	; SIO read status (port A)
x1sio$ac	equ	0a5h	; SIO write command (port A)

x1sio$bd	equ	0a6h	; SIO rs232 data (port B)
x1sio$bs	equ	0a7h	; SIO read status (port B)
x1sio$bc	equ	0a7h	; SIO write command (port B)

x1ctc$t0	equ	0a8h	; CTC write count to timer 0
x1ctc$c0	equ	0a8h	; CTC read counter 0
x1ctc$t1	equ	0a9h	; CTC write count to timer 1
x1ctc$c1	equ	0a9h	; CTC read counter 1
x1ctc$t2	equ	0aah	; CTC write count to timer 2
x1ctc$c2	equ	0aah	; CTC read counter 1
x1ctc$cw	equ	0abh	; CTC write control word

;--------------------------------------------------;
; 2nd Optional serial port addresss - address 0c?h ;
;--------------------------------------------------;

x2sio$ad	equ	0c4h	; SIO rs232 data (port A)
x2sio$as	equ	0c5h	; SIO read status (port A)
x2sio$ac	equ	0c5h	; SIO write command (port A)

x2sio$bd	equ	0c6h	; SIO rs232 data (port B)
x2sio$bs	equ	0c7h	; SIO read status (port B)
x2sio$bc	equ	0c7h	; SIO write command (port B)

x2ctc$t0	equ	0c8h	; CTC write count to timer 0
x2ctc$c0	equ	0c8h	; CTC read counter 0
x2ctc$t1	equ	0c9h	; CTC write count to timer 1
x2ctc$c1	equ	0c9h	; CTC read counter 1
x2ctc$t2	equ	0cah	; CTC write count to timer 2
x2ctc$c2	equ	0cah	; CTC read counter 1
x2ctc$cw	equ	0cbh	; CTC write control word

;----------------------------------------------------------------------

;----------------------------------------------------------------------------
; x1sioint	1st Optional RS-232C i/o
;
; Read character from either port A or port B
; and add character to respective fifo buffer
; remember this is an interrupt so keep it quick
;----------------------------------------------------------------------------

	cseg		; all interrupt handling must start in common

x1sioint:		; interrupt routine
	ld	(intsp),sp
	ld	sp,intsp	; use local stack
	call	?goint		; conditional switch to system bank
	jp	x1sint1

	dseg		; as now in system bank
x1sint1:
	ld	c,x1sio$as	; Channel A status
	ld	d,fif2al	; length of buffer -1
	ld	hl,fif2ar	; pointer to last character removed
	in	a,(c)
	bit	0,a		; test if rx full
	jr	nz,x1siorx

	ld	a,c
	or	010b		; Channel B status
	ld	c,a
	ld	d,fif2bl	; length of buffer -1
	ld	hl,fif2br	; pointer to last character removed
	in	a,(c)		; test serial port
	bit	0,a		; test if rx full
	jr	z,xsioclr	; neither serial ports caused interrupt 
; Option 1 SIO has character in receive buffer
x1siorx:
	call	xsiorx
	jr	x1sint1


;----------------------------------------------------------------------------
; x2sioint	2nd Optional RS-232C i/o
;
; Read character from either port A or port B
; and add character to respective fifo buffer
; remember this is an interrupt so keep it quick
;----------------------------------------------------------------------------

	cseg		; all interrupt handling must start in common

x2sioint:		; interrupt routine
	ld	(intsp),sp
	ld	sp,intsp	; use local stack
	call	?goint		; conditional switch to system bank
	jp	x2sint1

	dseg		; as now in system bank
x2sint1:

	ld	c,x2sio$as	; Channel A status
	ld	d,fif3al	; length of buffer -1
	ld	hl,fif3ar	; pointer to last character removed
	in	a,(c)
;20dec	bit	1,a		; test for interrupt pending (dont work)
	bit	0,a		; test if rx full
	jr	nz,x2siorx

	ld	a,c
	or	010b		; Channel B status
	ld	c,a
	ld	d,fif3bl	; length of buffer -1
	ld	hl,fif3br	; pointer to last character removed
	in	a,(c)		; test serial port
	bit	0,a		; test if rx full
	jr	z,xsioclr	; neither serial ports caused interrupt 

; Option 2 SIO has character in receive buffer
x2siorx:
	call	xsiorx
	jr	x2sint1

;----------------------------------------------------------------------------
; x1sioint & x2sioint - common modules
; Entry:	<C> -> status/command port
;		<D> =  length of buffer -1
;		<HL> -> last character removed
;----------------------------------------------------------------------------

; Optional serial port Rx character
; on entry <C> -> status/command port
xsiorx:
	ld	a,1
	out	(c),a		; read register 1
	in	a,(c)		; read status 2
	dec	c		; prepare for data register
	and	01110000b	; test error
	in	a,(c)		; input byte from SIO
	call	nz,sioerr	; read error

	call	addfifo		; add character to fifo buffer (<C> saved)

; test result of addition to fifo
	call	c,intbell	; error so ring bell
	ret

; Reset any other possible cause of interrupts
xsioclr:
	ld	a,c		; Channel port address
	and	not 10b		; Channel A
	or	01b		; command
	ld	c,a

 	ld	a,000010000b	; reset external/status interrupts
	out	(c),a		; channel A
 	ld	a,000101000b	; reset transmitter interrupt
	out	(c),a		; channel A

	inc	c
	inc	c
 	ld	a,000010000b	; reset external/status interrupts
	out	(c),a		; channel B
 	ld	a,000101000b	; reset transmitter interrupt
	out	(c),a		; channel B

	dec	c
	dec	c
	ld	a,00111000b	; End of interrupt as finished all processing
	out	(c),a		; channel A (only)

	jp	?reti		; and return from interrupt
				; (with (SP) -> callers bank)


	dseg			; remainder in system bank

	page

;			============
;			FIFO BUFFERS
;			============

;-------------------------------------------------------;
;	remove	          v	last byte removed	;
;		:::::::::::::::: - empty (fifst = 0)	;
;	fill	          ^	last byte added		;
;							;
;	remove	          v				;
;		:::::::::::1::::			;
;	fill	           ^				;
;							;
;	remove	          v				;
;		6789012345:12345 - nearly full		;
;	fill	         ^				;
;							;
;	remove	          v     last byte removed	;
;		6789012345612345 - full (fifst = -1)   	;
;	fill	          ^	last byte added		;
;-------------------------------------------------------;

;----------------------------------------------------------------------
; 1st Optional Serial i/o port-A fifo input buffer
; fifo bytes must be in this order
;----------------------------------------------------------------------
fifst2a:
	db	0		; set to 0ffh when buffer has character
fif2af:	db	0		; last byte to fill
fif2ar:	db	0		; last byte removed
fif2a:	ds	16		; 16 byte buffer
fif2al	equ	$-fif2a-1	; length of buffer less 1

;----------------------------------------------------------------------
; 1st Optional Serial i/o port-B fifo input buffer
; fifo bytes must be in this order
;----------------------------------------------------------------------
fifst2b:
	db	0		; set to 0ffh when buffer has character
fif2bf:	db	0		; last byte to fill
fif2br:	db	0		; last byte removed
fif2b:	ds	16		; 16 byte buffer
fif2bl	equ	$-fif2b-1	; length of buffer less 1

;----------------------------------------------------------------------
; 2nd Optional Serial i/o port-A fifo input buffer
; fifo bytes must be in this order
;----------------------------------------------------------------------
fifst3a:
	db	0		; set to 0ffh when buffer has character
fif3af:	db	0		; last byte to fill
fif3ar:	db	0		; last byte removed
fif3a:	ds	16		; 16 byte buffer
fif3al	equ	$-fif3a-1	; length of buffer less 1

;----------------------------------------------------------------------
; 2nd Optional Serial i/o port-B fifo input buffer
; fifo bytes must be in this order
;----------------------------------------------------------------------
fifst3b:
	db	0		; set to 0ffh when buffer has character
fif3bf:	db	0		; last byte to fill
fif3br:	db	0		; last byte removed
fif3b:	ds	16		; 16 byte buffer
fif3bl	equ	$-fif3b-1	; length of buffer less 1

	page

; =========================================
; General utilities to support fifo buffers
; =========================================

;----------------------------------------------------------------------
; addfifo - Add character in to fifo buffer
; Entry:	<A> contains character to add to buffer
;		<D> = length-1 of fifo buffer
;		<HL> -> fifo parameter block
;		<C> = port number
; RETURN:	carry set if fifo full, <C> preserved
; DESTROYED:	<A>, <HL>, <DE>
; NOTE: interrupts must be disabled whenever this routine is called
;----------------------------------------------------------------------
addfifo:
	ld	(fifochar),a	; and temporarily save
	ld	a,(hl)		; last character removed
	dec	hl
	ld	e,(hl)		; last character filled
	dec	hl		; pointer to fifo status
	cp	e		; test if removed = filled
	jr	nz,fifoadd	; -no-
	ld	a,(hl)		; -yes- test if fifo empty or full
	or	a
	scf			; set error flag in case
	ret	nz		; -full-
fifoadd:	or	-1
	ld	(hl),a		; set status to ready
	inc	e
	ld	a,d		; length of buffer -1
	cp	e
	jr	nc,fiford
	xor	a
	ld	e,a
fiford:	inc	hl		; pointer to byte to fill
	ld	(hl),e		; update last character filled
	inc	hl		; pointer to byte removed
	inc	hl		; pointer to fifo buffer
	ld	d,0		; fifo buffer
	add	hl,de		; pointer to byte to be filled
	ld	(hl),0		; add character to fifo
fifochar	equ	$-1
	xor	a
	ret			; return with carry not set

;----------------------------------------------------------------------
; EXFIFO
; Entry:	<A> = length of buffer -1
; 		<HL> -> fifo parameter block
; Return:	Set 'EMPTY' status of fifo parameter block
; Function:	Take character out of fifo buffer.
;		this assumes fifo status already tested.  
;----------------------------------------------------------------------
exfifo:
	di			; must disallow update of FIFO
	ld	e,(hl)		; offset to last character removed
	inc	e		; move to next character
	cp	e		; test with length-1
	jp	nc,efiupd
	ld	e,0		; > length-1 so set to zero
efiupd:
	ld	(hl),e		; update last character removed
	dec	hl
	ld	a,(hl)		; offset to last character added
	sub	e		; see if same
	jp	nz,efird
	dec	hl		; -yes- taken last character
	ld	(hl),a		; set status to not ready
	inc	hl
efird:
	inc	hl
	inc	hl		; fifo buffer
	ld	d,0
	add	hl,de
	ld	a,(hl)		; character

	ei			; breath again
	ret

	page

; ===================================
; set baud rates for main SIO devices
; <C> = CP/M Plus baud rate number
; <A> -> SIO register 4
; ===================================

	dseg		; as system bank already selected
set$baud:		; <A> -> SIO register 4
	call	baudrate	; returns <D>, <BC> = clock rate
sb$dvd:
	push	hl
	ld	hl,(sb$div)
	inc	hl
	ld	(sb$div),hl
	pop	hl
	add	hl,bc
	adc	a,d
	cp	clk$f/256	; timer clock
	jr	c,sb$dvd
	jr	nz,sb$cnt
	ld	e,a		; save <A>
	ld	a,h
	cp	clk$f and 0ffh	; timer clock
	ld	a,e
	jr	c,sb$dvd
sb$cnt:
	ld	hl,(sb$div)
	ex	de,hl		; <DE> = count
;
	ld	hl,clk$no	; required port
	ld	a,(hl)
	or	11b		; change to command port
	ld	c,a
	ld	a,(hl)		; required port
	and	11b		; mask port number
	rrca
	rrca			; move to bit 6 & 7
	or	110110b		; and add clock command
	out	(c),a		; set timer counter mode

	ld	c,(hl)		; required port
	ld	a,e
	out	(c),a		; set low bit rate

	ld	a,d
	out	(c),a		; set high bit rate

	ret

; =======================================
; set baud rates for optional SIO devices
; <C> = CP/M Plus baud rate number
; <A> -> SIO register 4
; =======================================

xset$baud:		; <A> -> SIO register 4
	call	baudrate	; returns <DEHL>=0, <BC> = rate
xsb$dvd:
	push	hl
	ld	hl,(sb$div)
	inc	hl
	ld	(sb$div),hl
	pop	hl
	add	hl,bc
	adc	a,d
	cp	xclk$f/256	; timer clock
	jr	c,xsb$dvd
	jr	nz,sb$cnt
	ld	e,a		; save <A>
	ld	a,h
	cp	xclk$f and 0ffh	; timer clock
	ld	a,e
	jr	c,xsb$dvd
	jr	sb$cnt
; --------------------------------------------
; common module for main & optional baud rates
; <C> = CP/M Plus baud rate number
; <A> -> SIO register 4 (for clock multiple)
; returns:	<D> <BC> = 3 byte clock rate
; --------------------------------------------
baudrate:		; <A> -> SIO register 4
	ld	b,0
	ld	hl,@cpm3b
	add	hl,bc
	add	hl,bc
	ld	c,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,c		; <hl> = required baud rate

	and	11000000b	; 00 = X1, 01 = X16, 10 = X32, 11 = X64
	rrca
	rrca			; = 0, 16, 32 or 64
	jr	z,retrate
;------------------------------------
; adjust baud rate for clock multiple
;------------------------------------
	add	a,3		; <A> = 4, 5, or 6 (16x, 32x or 64x)
	ld	b,a
	xor	a
adjclk:	add	hl,hl
	adc	a,a		; *2
	djnz	adjclk		; *16, or x32, or x64

retrate:			; <AHL> = clock rate
	ld	b,h
	ld	c,l		; <BC> = baud rate adjusted for multiple
	ld	d,a		; <D>  = very high byte

	xor	a		; return <A>, <HL> & (sb$div) set to zero
	ld	h,a
	ld	l,a		; set count to zero
	ld	(sb$div),hl
	ret


clk$no:	db	0		; set to keyboard or RS232 clock port number
sb$div:	dw	0		; temp data for result of divide

xserbaud:
	ld	(clk$no),a
	ld	a,b		; SIO register 4
	jr	xset$baud	; and set baud rate

ser2baud:
	ld	a,(@sio1a+4)	; RS232 SIO-A register 4
	ld	b,a
	ld	a,x1ctc$c0	; RS232 SIO-A clock port
	jr	xserbaud	; and set baud rate

ser3baud:
	ld	a,(@sio1b+4)	; RS232 SIO-B register 4
	ld	b,a
	ld	a,x1ctc$c1	; RS232 SIO-B clock port
	jr	xserbaud	; and set baud rate

ser4baud:
	ld	a,(@sio2a+4)	; RS232 SIO-A register 4
	ld	b,a
	ld	a,x2ctc$c0	; RS232 SIO-A clock port
	jr	xserbaud	; and set baud rate

ser5baud:
	ld	a,(@sio2b+4)	; RS232 SIO-B register 4
	ld	b,a
	ld	a,x2ctc$c1	; RS232 SIO-B clock port
	jr	xserbaud	; and set baud rate

	page

; ====================================================
; Initialise the SIO device to default settings
; ====================================================

	dseg		; as system bank already selected
;----------------------------------------------------------------------
; 7201 initialisation
; Control register 2A (and 2B if desired) should be programmed first to
; establish the Processor/Bus interface mode. Then program each channel
; to be used separately, beginning with Control Register 4 to set the
; protocol mode for that channel. The remaining registers may then be
; programmed in any order.
;----------------------------------------------------------------------

ser2set:
	ld	hl,@sio1a	; COMMAND table
	ld	c,x1sio$ac	; ....... port
	jr	serset

ser3set:
	ld	hl,@sio1b	; COMMAND table
	ld	c,x1sio$bc	; ....... port
	jr	serset

ser4set:
	ld	hl,@sio2a	; COMMAND table
	ld	c,x2sio$ac	; ....... port
	jr	serset

ser5set:
	ld	hl,@sio2b	; COMMAND table
	ld	c,x2sio$bc	; ....... port

serset:	ld	b,lensiotbl	; ....... length
	otir			; ....... set
	ret

; ======================================
; Table of SIO parameters for redefining
; Offset 4 bytes -> SIO register 4
; ======================================

	cseg		; for direct BIOS calls

@sio1a:			; table of RS232 SIO parameters
	db	18h		; Channel reset
	db	10h or 2	; Reset EX/SP int, Write register 2
	db	0		; with 8085 vector mode

	db	4		; Write register 4
	db	01110100b	; with x16, ASYNC, 1stop, no parity
	db	3		; Write register 3
	db	0e1h		; with 8bit Rx, auto, Rx enabled
	db	5		; Write register 5
	db	0eah		; with DTR,RTS = 1, 8bit Tx, Tx enabled
	db	1		; Write register 1
	db	10h		; with All Rx int

@sio1b:			; table of RS232 SIO parameters
	db	18h		; Channel reset
	db	10h or 2	; Reset EX/SP int, Write register 2
	db	0		; with 8085 vector mode

	db	4		; Write register 4
	db	01110100b	; with x16, ASYNC, 1stop, no parity
	db	3		; Write register 3
	db	0e1h		; with 8bit Rx, auto, Rx enabled
	db	5		; Write register 5
	db	0eah		; with DTR,RTS = 1, 8bit Tx, Tx enabled
	db	1		; Write register 1
	db	10h		; with All Rx int

@sio2a:			; table of RS232 SIO parameters
	db	18h		; Channel reset
	db	10h or 2	; Reset EX/SP int, Write register 2
	db	0		; with 8085 vector mode

	db	4		; Write register 4
	db	01110100b	; with x16, ASYNC, 1stop, no parity
	db	3		; Write register 3
	db	0e1h		; with 8bit Rx, auto, Rx enabled
	db	5		; Write register 5
	db	0eah		; with DTR,RTS = 1, 8bit Tx, Tx enabled
	db	1		; Write register 1
	db	10h		; with All Rx int

@sio2b:			; table of RS232 SIO parameters
	db	18h		; Channel reset
	db	10h or 2	; Reset EX/SP int, Write register 2
	db	0		; with 8085 vector mode

	db	4		; Write register 4
	db	01110100b	; with x16, ASYNC, 1stop, no parity
	db	3		; Write register 3
	db	0e1h		; with 8bit Rx, auto, Rx enabled
	db	5		; Write register 5
	db	0eah		; with DTR,RTS = 1, 8bit Tx, Tx enabled
	db	1		; Write register 1
	db	10h		; with All Rx int

	page

; =============================
; COLD BOOT  SIO initialisation
; (assumes interrupts disabled)
; =============================

	dseg		; as system bank already selected

;-----------------------------------------------;
; Initialise 1st optional RS232 serial i/o card ;
;-----------------------------------------------;

initx1sio:		; initialise 1st optional SIO board
x1serinit:		; Option Serial I/O char initialise
	xor	a
	ret			; ** not implemented **

; set up interupt flags

	ld	hl,inttble
	ld	b,5		; 5 possible slots
	ld	c,1
x1setid:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(de)
	cp	0fbh		; test for EI
	jr	nz,x1nxt	; -no- so must be in use by someone else
	di
	ex	de,hl
	inc	hl
	ld	(hl),03eh	; 'LD A,?'
	inc	hl
	ld	(hl),c		; <C> = 1,2,3,4 or 5
	inc	hl
	ld	(hl),0c9h	; 'RET'
	ex	de,hl
x1nxt:	inc	c
	djnz	x1setid

; now sense RS232 ID

	xor	a
	out	(0ach),a	; see if RS232 configured for this address
	nop
	or	a		; see if interrupt has done anything
	jr	z,x1clrid	; -no-

	dec	a
	ld	c,a
	ld	b,0
	ld	hl,inttble
	add	hl,bc
	add	hl,bc
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	hl,x1sioint	; optional RS232 interrupt routine
	ex	de,hl
	di
	ld	(hl),0c3h	; 'JP'
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d

; clear interupt flags

x1clid:
	ld	hl,inttble
	ld	b,5		; 5 possible slots
x1clrid:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(de)
	cp	0fbh		; test for EI
	jr	nz,x1cnxt	; -no- so must be in use
	di
	ex	de,hl
	inc	hl
	ld	(hl),0c9h	; 'RET'
	ex	de,hl
x1cnxt:	djnz	x1clrid

	ret

;-----------------------------------------------;
; Initialise 2nd optional RS232 serial i/o card ;
;-----------------------------------------------;

initx2sio:		; initialise 2nd optional SIO board
x2serinit:		; Option Serial I/O char initialise
	xor	a
	ret			; ** not implemented **

; set up interupt flags

	ld	hl,inttble
	ld	b,5		; 5 possible slots
	ld	c,1
x2setid:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(de)
	cp	0fbh		; test for EI
	jr	nz,x2nxt	; -no- so must be in use by someone else
	di
	ex	de,hl
	inc	hl
	ld	(hl),03eh	; 'LD A,?'
	inc	hl
	ld	(hl),c		; <C> = 1,2,3,4 or 5
	inc	hl
	ld	(hl),0c9h	; 'RET'
	ex	de,hl
x2nxt:	inc	c
	djnz	x2setid

; now sense RS232 ID

	xor	a
	out	(0cch),a	; see if RS232 configured for this address
	nop
	or	a		; see if interrupt has done anything
	jr	z,x2clrid	; -no-

	dec	a
	ld	c,a
	ld	b,0
	ld	hl,inttble
	add	hl,bc
	add	hl,bc
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	ld	hl,x2sioint	; optional RS232 interrupt routine
	ex	de,hl
	di
	ld	(hl),0c3h	; 'JP'
	inc	hl
	ld	(hl),e
	inc	hl
	ld	(hl),d

; clear interupt flags

x2clid:
	ld	hl,inttble
	ld	b,5		; 5 possible slots
x2clrid:
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	a,(de)
	cp	0fbh		; test for EI
	jr	nz,x2cnxt	; -no- so must be in use
	di
	ex	de,hl
	inc	hl
	ld	(hl),0c9h	; 'RET'
	ex	de,hl
x2cnxt:	djnz	x2clrid

	ret


;--------------------------------------------------;
; table of interrupt vectors for 5 expansion slots ;
;--------------------------------------------------;

inttble:
	dw	intx3		; option slot 1
	dw	intx4		; option slot 2
	dw	intx5		; option slot 3
	dw	intx6		; option slot 4
	dw	intx7		; option slot 5

;---------------------------------------------------------------

	end
